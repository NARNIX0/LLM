{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Button, Paper, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Define the two personalities\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst personalities = [{\n  name: \"Alex\",\n  color: \"#3f51b5\",\n  description: \"Thoughtful, philosophical, enjoys deep conversations\"\n}, {\n  name: \"Jordan\",\n  color: \"#f50057\",\n  description: \"Energetic, adventurous, loves sharing experiences\"\n}];\n\n// Simple conversation starters\nconst STARTERS = [\"What gives life meaning?\", \"Where would you travel if you could go anywhere?\", \"Is technology bringing people closer or pushing them apart?\", \"What's a book that changed your view of the world?\", \"What's something you've changed your mind about recently?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [exchangeCount, setExchangeCount] = useState(0);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Add a message to the UI\n  const addMessage = (speakerIndex, text) => {\n    const newMessage = {\n      id: Date.now(),\n      speaker: speakerIndex,\n      text: text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  };\n\n  // Use a simpler approach with hardcoded responses for reliability\n  const startConversation = async () => {\n    setMessages([]);\n    setError(null);\n    setIsRunning(true);\n    setExchangeCount(0);\n\n    // Choose a random starter\n    const starter = STARTERS[Math.floor(Math.random() * STARTERS.length)];\n    console.log(\"Starting with:\", starter);\n\n    // Add the starter message from Alex\n    addMessage(0, starter);\n\n    // Simulate conversation\n    simulateConversation(starter);\n  };\n\n  // Simulate a conversation with more interactive exchanges\n  const simulateConversation = async starter => {\n    // Create more extensive conversation flows that work as ongoing dialogues\n    const conversationFlows = {\n      \"What gives life meaning?\": [\n      // Alex's perspectives\n      [\"Life's meaning comes from the connections we form with others and our pursuit of experiences that challenge and fulfill us. It's in these moments of connection and growth that I find my deepest sense of purpose.\", \"That's an interesting perspective on adventure. I think there's also meaning in reflection and understanding - the quiet moments where we process these experiences and connect them to larger questions about existence.\", \"The idea of impact is compelling. I wonder though, is meaning something we create through our actions, or something we discover that was already there? Philosophy has debated this for centuries.\", \"Your approach to meaning through experiences is fascinating. I find that literature often explores this tension between action and contemplation. Have you found that your adventures lead to deeper insights about yourself?\", \"I appreciate how you connect meaning to tangible experiences. In my reading of existentialist philosophers, they suggest we create meaning through both action and how we interpret our experiences.\", \"The social dimension you mention resonates with me. Martin Buber wrote about the 'I-Thou' relationship as fundamental to meaning - that true meaning emerges in authentic connections with others.\"],\n      // Jordan's responses\n      [\"Life is all about adventures and pushing boundaries! I find meaning in collecting amazing experiences - like when I went skydiving and felt completely alive. It's about creating stories worth telling!\", \"I totally see what you mean about reflection! After climbing Kilimanjaro last year, I spent days just processing the experience. The adventure itself was amazing, but understanding how it changed me was even more powerful!\", \"That's such a thought-provoking question! From my experiences, I think we create meaning through what we choose to pursue. When I volunteered in Costa Rica, I wasn't just discovering meaning - I was actively creating it through connection!\", \"Absolutely! My three-month backpacking trip through South America completely changed my perspective on what matters. The people I met challenged my assumptions in ways no book could. Isn't that what life's all about?\", \"That balance between action and reflection is exactly it! I might seem like all action, but after each adventure, I journal extensively. It's not just about having experiences, but understanding how they shape who I'm becoming!\", \"Connections are everything! Whether it's bonding with fellow travelers on a night train in India or the deep conversations with locals in Morocco - these human connections give all the adventures purpose and depth!\"]],\n      \"Where would you travel if you could go anywhere?\": [\n      // Alex's perspectives on travel\n      [\"I'd visit Kyoto, Japan during autumn. The intersection of ancient temples, philosophical traditions, and natural beauty creates a setting for both reflection and cultural appreciation.\", \"Your enthusiasm for active adventures is compelling. I'm curious how you balance the excitement of these activities with absorbing the cultural context around them?\", \"The diversity of experiences you seek is admirable. I tend to prefer deeper immersion in fewer locations - spending weeks in one city, getting to know its literary history and philosophical traditions.\", \"The way you describe Antarctica as a frontier reminds me of how travel often represents our relationship with the unknown. I'm drawn to places that have inspired great thinkers and artists throughout history.\", \"Your approach to travel seems to embrace spontaneity. I find value in both planned exploration and unexpected discoveries - like finding a small bookshop in Prague that housed first editions of Kafka.\", \"The communal aspect of your travel experiences is fascinating. While I often seek solitude in travel, I recognize how shared experiences can provide different perspectives on the same location.\"],\n      // Jordan's responses on travel\n      [\"New Zealand, without a doubt! The opportunity to bungee jump, hike volcanoes, and kayak through those incredible landscapes would be the ultimate adventure!\", \"That's a great question! For me, the physical challenges actually enhance cultural appreciation - like when I learned traditional climbing techniques from local guides in Thailand. The adrenaline connects me to places in a unique way!\", \"I see the value in that depth approach! Though I love variety - one month I might be surfing in Bali, the next exploring ancient ruins in Peru. Each place teaches me something new about the world and myself!\", \"Exactly! When I stood at the edge of Victoria Falls, I felt that same connection to the unknown! Though for me, it's less about following historical figures and more about writing my own story in these epic landscapes!\", \"Spontaneity is my travel philosophy! Some of my most meaningful experiences happened when plans fell apart - like when a missed flight led me to an amazing festival in Morocco. Don't you find that unexpected detours often become highlights?\", \"The people make the journey! I've formed lifelong friendships in hostels and on hiking trails. There's something about sharing those intense travel experiences that creates instant bonds. Have you had similar connections on your more contemplative journeys?\"]]\n      // Add additional conversation flows for other starters...\n    };\n\n    // Use fallback if no specific flow exists\n    const defaultFlow = conversationFlows[\"What gives life meaning?\"];\n    const conversationFlow = conversationFlows[starter] || defaultFlow;\n\n    // Show Jordan thinking\n    addMessage(1, \"...\");\n\n    // Start the conversational flow\n    setTimeout(() => {\n      // Remove typing indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Add Jordan's first response\n      addMessage(1, conversationFlow[1][0]);\n\n      // Begin the continuous conversation\n      setTimeout(() => {\n        continuousConversation(conversationFlow, 1, 1);\n      }, 1500);\n    }, 1500);\n  };\n\n  // New function for truly continuous back-and-forth conversation\n  const continuousConversation = (conversationFlow, lastSpeaker, messageIndex) => {\n    if (!isRunning) return;\n\n    // Toggle to the other speaker\n    const currentSpeaker = lastSpeaker === 1 ? 0 : 1;\n\n    // Show typing indicator\n    addMessage(currentSpeaker, \"...\");\n\n    // Add response after a delay\n    setTimeout(() => {\n      // Remove typing indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Get appropriate response for this point in conversation\n      const speakerFlow = conversationFlow[currentSpeaker];\n      // Use modulo to cycle through responses if we exceed available ones\n      const responseToUse = speakerFlow[Math.min(messageIndex, speakerFlow.length - 1)];\n\n      // Add the message\n      addMessage(currentSpeaker, responseToUse);\n\n      // Update exchange counter if Jordan (speaker 1) just responded\n      if (currentSpeaker === 1) {\n        setExchangeCount(prev => prev + 1);\n      }\n\n      // Continue the conversation after a pause\n      setTimeout(() => {\n        if (isRunning) {\n          // Advance to next message index if current speaker is Jordan (completing an exchange)\n          const nextIndex = currentSpeaker === 1 ? messageIndex + 1 : messageIndex;\n          continuousConversation(conversationFlow, currentSpeaker, nextIndex);\n        }\n      }, 2000);\n    }, 2000);\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Conversation Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: 2,\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: startConversation,\n          disabled: isRunning,\n          children: \"Start Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), isRunning && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: stopConversation,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        textAlign: \"center\",\n        sx: {\n          mb: 2\n        },\n        children: [\"Conversation exchanges: \", exchangeCount, \" (continues until stopped)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          height: '60vh',\n          p: 2,\n          mb: 2,\n          overflowY: 'auto',\n          bgcolor: '#f5f5f5'\n        },\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              maxWidth: '80%',\n              bgcolor: personalities[message.speaker].color,\n              color: 'white',\n              p: 2,\n              borderRadius: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                opacity: 0.9,\n                mb: 0.5\n              },\n              children: personalities[message.speaker].name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 16,\n                color: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this) : message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: personalities.map((person, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: person.color\n          },\n          children: [person.name, \": \", messages.filter(m => m.speaker === index && m.text !== \"...\").length, \" messages\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"vO8bxMv1KRz1mAEqSA9pgYE/T0I=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Button","Paper","CircularProgress","Alert","ArrowBackIcon","jsxDEV","_jsxDEV","personalities","name","color","description","STARTERS","AIChatSimulation","_s","navigate","messages","setMessages","isRunning","setIsRunning","isLoading","setIsLoading","error","setError","messagesEndRef","exchangeCount","setExchangeCount","_messagesEndRef$curre","current","scrollIntoView","behavior","addMessage","speakerIndex","text","newMessage","id","Date","now","speaker","prev","startConversation","starter","Math","floor","random","length","console","log","simulateConversation","conversationFlows","defaultFlow","conversationFlow","setTimeout","filter","m","continuousConversation","lastSpeaker","messageIndex","currentSpeaker","speakerFlow","responseToUse","min","nextIndex","stopConversation","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","severity","display","justifyContent","gap","disabled","elevation","height","p","overflowY","bgcolor","map","message","flexDirection","alignItems","borderRadius","opacity","size","ref","person","index","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Define the two personalities\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    color: \"#3f51b5\",\r\n    description: \"Thoughtful, philosophical, enjoys deep conversations\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    color: \"#f50057\", \r\n    description: \"Energetic, adventurous, loves sharing experiences\"\r\n  }\r\n];\r\n\r\n// Simple conversation starters\r\nconst STARTERS = [\r\n  \"What gives life meaning?\",\r\n  \"Where would you travel if you could go anywhere?\",\r\n  \"Is technology bringing people closer or pushing them apart?\",\r\n  \"What's a book that changed your view of the world?\",\r\n  \"What's something you've changed your mind about recently?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const [exchangeCount, setExchangeCount] = useState(0);\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Add a message to the UI\r\n  const addMessage = (speakerIndex, text) => {\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      speaker: speakerIndex,\r\n      text: text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    return newMessage;\r\n  };\r\n\r\n  // Use a simpler approach with hardcoded responses for reliability\r\n  const startConversation = async () => {\r\n    setMessages([]);\r\n    setError(null);\r\n    setIsRunning(true);\r\n    setExchangeCount(0);\r\n    \r\n    // Choose a random starter\r\n    const starter = STARTERS[Math.floor(Math.random() * STARTERS.length)];\r\n    console.log(\"Starting with:\", starter);\r\n    \r\n    // Add the starter message from Alex\r\n    addMessage(0, starter);\r\n    \r\n    // Simulate conversation\r\n    simulateConversation(starter);\r\n  };\r\n\r\n  // Simulate a conversation with more interactive exchanges\r\n  const simulateConversation = async (starter) => {\r\n    // Create more extensive conversation flows that work as ongoing dialogues\r\n    const conversationFlows = {\r\n      \"What gives life meaning?\": [\r\n        // Alex's perspectives\r\n        [\r\n          \"Life's meaning comes from the connections we form with others and our pursuit of experiences that challenge and fulfill us. It's in these moments of connection and growth that I find my deepest sense of purpose.\",\r\n          \"That's an interesting perspective on adventure. I think there's also meaning in reflection and understanding - the quiet moments where we process these experiences and connect them to larger questions about existence.\",\r\n          \"The idea of impact is compelling. I wonder though, is meaning something we create through our actions, or something we discover that was already there? Philosophy has debated this for centuries.\",\r\n          \"Your approach to meaning through experiences is fascinating. I find that literature often explores this tension between action and contemplation. Have you found that your adventures lead to deeper insights about yourself?\",\r\n          \"I appreciate how you connect meaning to tangible experiences. In my reading of existentialist philosophers, they suggest we create meaning through both action and how we interpret our experiences.\",\r\n          \"The social dimension you mention resonates with me. Martin Buber wrote about the 'I-Thou' relationship as fundamental to meaning - that true meaning emerges in authentic connections with others.\"\r\n        ],\r\n        // Jordan's responses\r\n        [\r\n          \"Life is all about adventures and pushing boundaries! I find meaning in collecting amazing experiences - like when I went skydiving and felt completely alive. It's about creating stories worth telling!\",\r\n          \"I totally see what you mean about reflection! After climbing Kilimanjaro last year, I spent days just processing the experience. The adventure itself was amazing, but understanding how it changed me was even more powerful!\",\r\n          \"That's such a thought-provoking question! From my experiences, I think we create meaning through what we choose to pursue. When I volunteered in Costa Rica, I wasn't just discovering meaning - I was actively creating it through connection!\",\r\n          \"Absolutely! My three-month backpacking trip through South America completely changed my perspective on what matters. The people I met challenged my assumptions in ways no book could. Isn't that what life's all about?\",\r\n          \"That balance between action and reflection is exactly it! I might seem like all action, but after each adventure, I journal extensively. It's not just about having experiences, but understanding how they shape who I'm becoming!\",\r\n          \"Connections are everything! Whether it's bonding with fellow travelers on a night train in India or the deep conversations with locals in Morocco - these human connections give all the adventures purpose and depth!\"\r\n        ]\r\n      ],\r\n      \"Where would you travel if you could go anywhere?\": [\r\n        // Alex's perspectives on travel\r\n        [\r\n          \"I'd visit Kyoto, Japan during autumn. The intersection of ancient temples, philosophical traditions, and natural beauty creates a setting for both reflection and cultural appreciation.\",\r\n          \"Your enthusiasm for active adventures is compelling. I'm curious how you balance the excitement of these activities with absorbing the cultural context around them?\",\r\n          \"The diversity of experiences you seek is admirable. I tend to prefer deeper immersion in fewer locations - spending weeks in one city, getting to know its literary history and philosophical traditions.\",\r\n          \"The way you describe Antarctica as a frontier reminds me of how travel often represents our relationship with the unknown. I'm drawn to places that have inspired great thinkers and artists throughout history.\",\r\n          \"Your approach to travel seems to embrace spontaneity. I find value in both planned exploration and unexpected discoveries - like finding a small bookshop in Prague that housed first editions of Kafka.\",\r\n          \"The communal aspect of your travel experiences is fascinating. While I often seek solitude in travel, I recognize how shared experiences can provide different perspectives on the same location.\"\r\n        ],\r\n        // Jordan's responses on travel\r\n        [\r\n          \"New Zealand, without a doubt! The opportunity to bungee jump, hike volcanoes, and kayak through those incredible landscapes would be the ultimate adventure!\",\r\n          \"That's a great question! For me, the physical challenges actually enhance cultural appreciation - like when I learned traditional climbing techniques from local guides in Thailand. The adrenaline connects me to places in a unique way!\",\r\n          \"I see the value in that depth approach! Though I love variety - one month I might be surfing in Bali, the next exploring ancient ruins in Peru. Each place teaches me something new about the world and myself!\",\r\n          \"Exactly! When I stood at the edge of Victoria Falls, I felt that same connection to the unknown! Though for me, it's less about following historical figures and more about writing my own story in these epic landscapes!\",\r\n          \"Spontaneity is my travel philosophy! Some of my most meaningful experiences happened when plans fell apart - like when a missed flight led me to an amazing festival in Morocco. Don't you find that unexpected detours often become highlights?\",\r\n          \"The people make the journey! I've formed lifelong friendships in hostels and on hiking trails. There's something about sharing those intense travel experiences that creates instant bonds. Have you had similar connections on your more contemplative journeys?\"\r\n        ]\r\n      ],\r\n      // Add additional conversation flows for other starters...\r\n    };\r\n    \r\n    // Use fallback if no specific flow exists\r\n    const defaultFlow = conversationFlows[\"What gives life meaning?\"];\r\n    const conversationFlow = conversationFlows[starter] || defaultFlow;\r\n    \r\n    // Show Jordan thinking\r\n    addMessage(1, \"...\");\r\n    \r\n    // Start the conversational flow\r\n    setTimeout(() => {\r\n      // Remove typing indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Add Jordan's first response\r\n      addMessage(1, conversationFlow[1][0]);\r\n      \r\n      // Begin the continuous conversation\r\n      setTimeout(() => {\r\n        continuousConversation(conversationFlow, 1, 1);\r\n      }, 1500);\r\n    }, 1500);\r\n  };\r\n  \r\n  // New function for truly continuous back-and-forth conversation\r\n  const continuousConversation = (conversationFlow, lastSpeaker, messageIndex) => {\r\n    if (!isRunning) return;\r\n    \r\n    // Toggle to the other speaker\r\n    const currentSpeaker = lastSpeaker === 1 ? 0 : 1;\r\n    \r\n    // Show typing indicator\r\n    addMessage(currentSpeaker, \"...\");\r\n    \r\n    // Add response after a delay\r\n    setTimeout(() => {\r\n      // Remove typing indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Get appropriate response for this point in conversation\r\n      const speakerFlow = conversationFlow[currentSpeaker];\r\n      // Use modulo to cycle through responses if we exceed available ones\r\n      const responseToUse = speakerFlow[Math.min(messageIndex, speakerFlow.length - 1)];\r\n      \r\n      // Add the message\r\n      addMessage(currentSpeaker, responseToUse);\r\n      \r\n      // Update exchange counter if Jordan (speaker 1) just responded\r\n      if (currentSpeaker === 1) {\r\n        setExchangeCount(prev => prev + 1);\r\n      }\r\n      \r\n      // Continue the conversation after a pause\r\n      setTimeout(() => {\r\n        if (isRunning) {\r\n          // Advance to next message index if current speaker is Jordan (completing an exchange)\r\n          const nextIndex = currentSpeaker === 1 ? messageIndex + 1 : messageIndex;\r\n          continuousConversation(conversationFlow, currentSpeaker, nextIndex);\r\n        }\r\n      }, 2000);\r\n    }, 2000);\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Conversation Simulation\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Controls */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 3 }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={startConversation}\r\n            disabled={isRunning}\r\n          >\r\n            Start Conversation\r\n          </Button>\r\n          \r\n          {isRunning && (\r\n            <Button \r\n              variant=\"outlined\" \r\n              color=\"error\"\r\n              onClick={stopConversation}\r\n            >\r\n              Stop\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        \r\n        {/* Exchange counter - no limit shown */}\r\n        {messages.length > 0 && (\r\n          <Typography variant=\"body2\" textAlign=\"center\" sx={{ mb: 2 }}>\r\n            Conversation exchanges: {exchangeCount} (continues until stopped)\r\n          </Typography>\r\n        )}\r\n        \r\n        {/* Chat display */}\r\n        <Paper \r\n          elevation={3} \r\n          sx={{ \r\n            height: '60vh', \r\n            p: 2, \r\n            mb: 2, \r\n            overflowY: 'auto',\r\n            bgcolor: '#f5f5f5' \r\n          }}\r\n        >\r\n          {messages.map((message) => (\r\n            <Box \r\n              key={message.id}\r\n              sx={{ \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\r\n                mb: 2\r\n              }}\r\n            >\r\n              <Box \r\n                sx={{ \r\n                  maxWidth: '80%', \r\n                  bgcolor: personalities[message.speaker].color,\r\n                  color: 'white',\r\n                  p: 2, \r\n                  borderRadius: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle2\" sx={{ opacity: 0.9, mb: 0.5 }}>\r\n                  {personalities[message.speaker].name}\r\n                </Typography>\r\n                \r\n                <Typography variant=\"body1\">\r\n                  {message.text === \"...\" ? (\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                  ) : message.text}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </Paper>\r\n        \r\n        {/* Stats */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {personalities.map((person, index) => (\r\n            <Typography key={index} variant=\"body2\" sx={{ color: person.color }}>\r\n              {person.name}: {messages.filter(m => m.speaker === index && m.text !== \"...\").length} messages\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}