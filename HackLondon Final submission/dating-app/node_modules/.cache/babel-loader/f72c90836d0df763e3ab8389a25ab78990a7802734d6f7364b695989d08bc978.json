{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Paper, Avatar, Button, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\n// Type declaration for TypeScript\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Define the personalities\nconst personalities = [{\n  id: 0,\n  name: \"Alex\",\n  avatar: \"A\",\n  color: \"#3f51b5\",\n  systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\n}, {\n  id: 1,\n  name: \"Jordan\",\n  avatar: \"J\",\n  color: \"#f50057\",\n  systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\n}];\n\n// Define a message type\n\n// Conversation starters\nconst conversationStarters = [\"What do you think gives life meaning?\", \"If you could travel anywhere, where would you go and why?\", \"What's something you've changed your mind about recently?\", \"Do you think technology is bringing people closer together or pushing them apart?\", \"What's a book or movie that changed how you see the world?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isActive, setIsActive] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [messageCount, setMessageCount] = useState({\n    0: 0,\n    1: 0\n  });\n  const [isComplete, setIsComplete] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [testResponse, setTestResponse] = useState(null);\n  const [testing, setTesting] = useState(false);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Function to start the conversation\n  const startConversation = () => {\n    setIsActive(true);\n    setIsComplete(false);\n    setMessages([]);\n    setMessageCount({\n      0: 0,\n      1: 0\n    });\n    setError(null);\n\n    // Choose a random starter\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\n    console.log(\"Starting conversation with:\", starter);\n\n    // Add first message from Alex (personality 0)\n    addMessage(0, starter);\n\n    // Initialize conversation history - this is crucial for context\n    const initialHistory = [{\n      role: \"system\",\n      content: personalities[1].systemPrompt\n    },\n    // Set Jordan's personality\n    {\n      role: \"user\",\n      content: `${personalities[0].name} said: \"${starter}\"`\n    }];\n    setConversationHistory(initialHistory);\n\n    // Start the conversation with the first response from Jordan\n    generateNextResponse(0, starter, initialHistory);\n  };\n\n  // Add a new message\n  const addMessage = (sender, text) => {\n    const newMessage = {\n      id: Date.now(),\n      sender,\n      text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setMessageCount(prev => ({\n      ...prev,\n      [sender]: prev[sender] + 1\n    }));\n    return newMessage;\n  };\n\n  // Add a typing indicator\n  const addTypingIndicator = sender => {\n    const indicator = {\n      id: Date.now(),\n      sender,\n      text: \"...\",\n      isTyping: true\n    };\n    setMessages(prev => [...prev, indicator]);\n    return indicator;\n  };\n\n  // Remove the typing indicator\n  const removeTypingIndicator = indicator => {\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\n  };\n\n  // Generate the next response in the conversation\n  const generateNextResponse = async (lastSender, lastMessage, history = null) => {\n    if (!isActive) return;\n\n    // Determine next sender (alternate between 0 and 1)\n    const nextSender = lastSender === 0 ? 1 : 0;\n    console.log(`Generating response from ${personalities[nextSender].name} to message from ${personalities[lastSender].name}`);\n\n    // Check if we've reached the message limit\n    if (messageCount[nextSender] >= 10) {\n      setIsComplete(true);\n      setIsActive(false);\n      return;\n    }\n\n    // Show typing indicator\n    const indicator = addTypingIndicator(nextSender);\n    try {\n      var _responseData$choices, _responseData$choices2, _responseData$choices3, _responseData$choices4;\n      // Create a very simple request\n      const apiKey = process.env.REACT_APP_GROQ_API_KEY;\n      console.log(\"API Key starts with:\", (apiKey === null || apiKey === void 0 ? void 0 : apiKey.substring(0, 5)) + \"...\");\n\n      // Format the conversation as a simple prompt\n      const prompt = `You are ${personalities[nextSender].name}. ${personalities[nextSender].id === 0 ? \"You are thoughtful, philosophical, and enjoy discussing deep topics.\" : \"You are energetic, adventurous, and love sharing stories about your experiences.\"}\n        \n        ${personalities[lastSender].name} just said to you: \"${lastMessage}\"\n        \n        Respond as ${personalities[nextSender].name} in a concise way (under 80 words). Stay in character.`;\n      console.log(\"Prompt:\", prompt);\n\n      // Simple request with minimal parameters\n      const requestData = {\n        model: \"llama-3.3-70b-versatile\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        max_tokens: 150,\n        temperature: 0.7\n      };\n      console.log(\"Request:\", JSON.stringify(requestData));\n\n      // Use raw fetch to minimize potential issues\n      const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${apiKey}`\n        },\n        body: JSON.stringify(requestData)\n      });\n      console.log(\"Response status:\", response.status);\n      const responseData = await response.json();\n      console.log(\"Full API response:\", responseData);\n\n      // Check for errors\n      if (!response.ok) {\n        var _responseData$error;\n        throw new Error(`API error (${response.status}): ${((_responseData$error = responseData.error) === null || _responseData$error === void 0 ? void 0 : _responseData$error.message) || \"Unknown error\"}`);\n      }\n\n      // Extract the response text\n      const generatedText = (_responseData$choices = responseData.choices) === null || _responseData$choices === void 0 ? void 0 : (_responseData$choices2 = _responseData$choices[0]) === null || _responseData$choices2 === void 0 ? void 0 : (_responseData$choices3 = _responseData$choices2.message) === null || _responseData$choices3 === void 0 ? void 0 : (_responseData$choices4 = _responseData$choices3.content) === null || _responseData$choices4 === void 0 ? void 0 : _responseData$choices4.trim();\n      console.log(\"Generated text:\", generatedText);\n      if (!generatedText) {\n        throw new Error(\"No text generated from API\");\n      }\n\n      // Remove typing indicator and add the message\n      removeTypingIndicator(indicator);\n      addMessage(nextSender, generatedText);\n\n      // Schedule the next message after a delay\n      setTimeout(() => {\n        if (isActive) {\n          generateNextResponse(nextSender, generatedText);\n        }\n      }, 2000);\n    } catch (err) {\n      console.error(\"Error in API call:\", err);\n      setError(`API error: ${err.message}`);\n      removeTypingIndicator(indicator);\n\n      // Use a fallback response\n      const fallback = nextSender === 0 ? \"I find that perspective fascinating. What do you think about the deeper meaning behind that?\" : \"That's awesome! I had a similar experience while hiking in Colorado last summer.\";\n      addMessage(nextSender, fallback);\n\n      // Continue with fallback\n      setTimeout(() => {\n        if (isActive) {\n          generateNextResponse(nextSender, fallback);\n        }\n      }, 2000);\n    }\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsActive(false);\n  };\n\n  // Add this function to test the API directly\n  const testGroqAPI = async () => {\n    setTesting(true);\n    setTestResponse(null);\n    setError(null);\n    try {\n      var _process$env$REACT_AP, _data$choices$, _data$choices$$messag;\n      console.log(\"Testing Groq API with key:\", ((_process$env$REACT_AP = process.env.REACT_APP_GROQ_API_KEY) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.substring(0, 5)) + \"...\");\n      const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${process.env.REACT_APP_GROQ_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"llama-3.3-70b-versatile\",\n          // Updated to more powerful model\n          messages: [{\n            role: \"system\",\n            content: \"You are a helpful assistant.\"\n          }, {\n            role: \"user\",\n            content: \"Say 'API test successful!' and nothing else.\"\n          }],\n          max_tokens: 50,\n          temperature: 0.7\n        })\n      });\n      console.log(\"Response status:\", response.status);\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        console.error(\"API error:\", errorData);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || `API returned ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"API response:\", data);\n      const text = ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || \"No content returned\";\n      setTestResponse(text);\n    } catch (err) {\n      console.error(\"Error testing Groq API:\", err);\n      setError(`API test failed: ${err.message}`);\n    } finally {\n      setTesting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Match Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        paragraph: true,\n        textAlign: \"center\",\n        children: \"Watch as AI personalities have a conversation that simulates our matching system. Each message is generated by a language model taking on a distinct personality.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Test Groq API Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: testGroqAPI,\n          disabled: testing,\n          sx: {\n            mb: 2\n          },\n          children: testing ? \"Testing...\" : \"Test API Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), testResponse && /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 1,\n          sx: {\n            p: 2,\n            maxWidth: '100%',\n            bgcolor: '#e8f5e9',\n            mt: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"API Response:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this), \" \", testResponse]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), messages.length === 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 26\n          }, this),\n          onClick: startConversation,\n          sx: {\n            py: 2,\n            px: 4\n          },\n          children: \"Start AI Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            mt: 4\n          },\n          children: personalities.map(personality => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              p: 2,\n              borderRadius: 2,\n              bgcolor: `${personality.color}20`,\n              maxWidth: '45%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mb: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  bgcolor: personality.color,\n                  mr: 1\n                },\n                children: personality.avatar\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                fontWeight: \"bold\",\n                children: personality.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              textAlign: \"center\",\n              children: personality.id === 0 ? \"Thoughtful, philosophical, enjoys art & literature\" : \"Adventurous, energetic, loves travel & experiences\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this)]\n          }, personality.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '60vh',\n            overflowY: 'auto',\n            p: 2,\n            backgroundColor: '#f5f5f5'\n          },\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                maxWidth: '70%',\n                bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\n                color: 'white',\n                p: 2,\n                borderRadius: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.isTyping ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 16,\n                  color: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    sx: {\n                      display: 'block',\n                      opacity: 0.8,\n                      mb: 0.5\n                    },\n                    children: personalities[message.sender].name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 27\n                  }, this), message.text]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[0].name, \": \", messageCount[0], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this), isActive && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: stopConversation,\n            children: \"Stop Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[1].name, \": \", messageCount[1], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this), isComplete && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Conversation Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => navigate('/create-profile'),\n              sx: {\n                mx: 1\n              },\n              children: \"Create Your Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"secondary\",\n              onClick: startConversation,\n              sx: {\n                mx: 1\n              },\n              children: \"Start New Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"cm2DCo1w2RsqQpjERgiMCUFZB8E=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Container","Typography","Box","Paper","Avatar","Button","CircularProgress","Alert","ArrowBackIcon","PlayArrowIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","personalities","id","name","avatar","color","systemPrompt","conversationStarters","AIChatSimulation","_s","navigate","messages","setMessages","isActive","setIsActive","error","setError","messagesEndRef","messageCount","setMessageCount","isComplete","setIsComplete","conversationHistory","setConversationHistory","testResponse","setTestResponse","testing","setTesting","_messagesEndRef$curre","current","scrollIntoView","behavior","startConversation","starter","Math","floor","random","length","console","log","addMessage","initialHistory","role","content","generateNextResponse","sender","text","newMessage","Date","now","prev","addTypingIndicator","indicator","isTyping","removeTypingIndicator","filter","m","lastSender","lastMessage","history","nextSender","_responseData$choices","_responseData$choices2","_responseData$choices3","_responseData$choices4","apiKey","process","env","REACT_APP_GROQ_API_KEY","substring","prompt","requestData","model","max_tokens","temperature","JSON","stringify","response","fetch","method","headers","body","status","responseData","json","ok","_responseData$error","Error","message","generatedText","choices","trim","setTimeout","err","fallback","stopConversation","testGroqAPI","_process$env$REACT_AP","_data$choices$","_data$choices$$messag","_errorData$error","errorData","data","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","paragraph","my","display","flexDirection","alignItems","disabled","elevation","p","bgcolor","mt","severity","justifyContent","size","px","map","personality","borderRadius","mr","fontWeight","height","overflowY","backgroundColor","opacity","ref","mx","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\n// Type declaration for TypeScript\r\ndeclare const process: any;\r\n\r\n// Define the personalities\r\nconst personalities = [\r\n  {\r\n    id: 0,\r\n    name: \"Alex\",\r\n    avatar: \"A\",\r\n    color: \"#3f51b5\",\r\n    systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Jordan\",\r\n    avatar: \"J\",\r\n    color: \"#f50057\",\r\n    systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\r\n  }\r\n];\r\n\r\n// Define a message type\r\ninterface Message {\r\n  id: number;\r\n  sender: number; // 0 for Alex, 1 for Jordan\r\n  text: string;\r\n  isTyping?: boolean;\r\n}\r\n\r\n// Conversation starters\r\nconst conversationStarters = [\r\n  \"What do you think gives life meaning?\",\r\n  \"If you could travel anywhere, where would you go and why?\",\r\n  \"What's something you've changed your mind about recently?\",\r\n  \"Do you think technology is bringing people closer together or pushing them apart?\",\r\n  \"What's a book or movie that changed how you see the world?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [messageCount, setMessageCount] = useState({ 0: 0, 1: 0 });\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [conversationHistory, setConversationHistory] = useState<Array<{role: string, content: string}>>([]);\r\n  const [testResponse, setTestResponse] = useState<string | null>(null);\r\n  const [testing, setTesting] = useState(false);\r\n  \r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  // Function to start the conversation\r\n  const startConversation = () => {\r\n    setIsActive(true);\r\n    setIsComplete(false);\r\n    setMessages([]);\r\n    setMessageCount({ 0: 0, 1: 0 });\r\n    setError(null);\r\n    \r\n    // Choose a random starter\r\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\r\n    console.log(\"Starting conversation with:\", starter);\r\n    \r\n    // Add first message from Alex (personality 0)\r\n    addMessage(0, starter);\r\n    \r\n    // Initialize conversation history - this is crucial for context\r\n    const initialHistory = [\r\n      { role: \"system\", content: personalities[1].systemPrompt }, // Set Jordan's personality\r\n      { role: \"user\", content: `${personalities[0].name} said: \"${starter}\"` }\r\n    ];\r\n    \r\n    setConversationHistory(initialHistory);\r\n    \r\n    // Start the conversation with the first response from Jordan\r\n    generateNextResponse(0, starter, initialHistory);\r\n  };\r\n  \r\n  // Add a new message\r\n  const addMessage = (sender: number, text: string) => {\r\n    const newMessage: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    setMessageCount(prev => ({ ...prev, [sender]: prev[sender] + 1 }));\r\n    \r\n    return newMessage;\r\n  };\r\n  \r\n  // Add a typing indicator\r\n  const addTypingIndicator = (sender: number) => {\r\n    const indicator: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text: \"...\",\r\n      isTyping: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, indicator]);\r\n    return indicator;\r\n  };\r\n  \r\n  // Remove the typing indicator\r\n  const removeTypingIndicator = (indicator: Message) => {\r\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\r\n  };\r\n  \r\n  // Generate the next response in the conversation\r\n  const generateNextResponse = async (lastSender: number, lastMessage: string, history = null) => {\r\n    if (!isActive) return;\r\n    \r\n    // Determine next sender (alternate between 0 and 1)\r\n    const nextSender = lastSender === 0 ? 1 : 0;\r\n    console.log(`Generating response from ${personalities[nextSender].name} to message from ${personalities[lastSender].name}`);\r\n    \r\n    // Check if we've reached the message limit\r\n    if (messageCount[nextSender] >= 10) {\r\n      setIsComplete(true);\r\n      setIsActive(false);\r\n      return;\r\n    }\r\n    \r\n    // Show typing indicator\r\n    const indicator = addTypingIndicator(nextSender);\r\n    \r\n    try {\r\n      // Create a very simple request\r\n      const apiKey = process.env.REACT_APP_GROQ_API_KEY;\r\n      console.log(\"API Key starts with:\", apiKey?.substring(0, 5) + \"...\");\r\n      \r\n      // Format the conversation as a simple prompt\r\n      const prompt = `You are ${personalities[nextSender].name}. ${personalities[nextSender].id === 0 ? \r\n        \"You are thoughtful, philosophical, and enjoy discussing deep topics.\" : \r\n        \"You are energetic, adventurous, and love sharing stories about your experiences.\"}\r\n        \r\n        ${personalities[lastSender].name} just said to you: \"${lastMessage}\"\r\n        \r\n        Respond as ${personalities[nextSender].name} in a concise way (under 80 words). Stay in character.`;\r\n      \r\n      console.log(\"Prompt:\", prompt);\r\n      \r\n      // Simple request with minimal parameters\r\n      const requestData = {\r\n        model: \"llama-3.3-70b-versatile\",\r\n        messages: [\r\n          { role: \"user\", content: prompt }\r\n        ],\r\n        max_tokens: 150,\r\n        temperature: 0.7\r\n      };\r\n      \r\n      console.log(\"Request:\", JSON.stringify(requestData));\r\n      \r\n      // Use raw fetch to minimize potential issues\r\n      const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify(requestData)\r\n      });\r\n      \r\n      console.log(\"Response status:\", response.status);\r\n      const responseData = await response.json();\r\n      console.log(\"Full API response:\", responseData);\r\n      \r\n      // Check for errors\r\n      if (!response.ok) {\r\n        throw new Error(`API error (${response.status}): ${responseData.error?.message || \"Unknown error\"}`);\r\n      }\r\n      \r\n      // Extract the response text\r\n      const generatedText = responseData.choices?.[0]?.message?.content?.trim();\r\n      console.log(\"Generated text:\", generatedText);\r\n      \r\n      if (!generatedText) {\r\n        throw new Error(\"No text generated from API\");\r\n      }\r\n      \r\n      // Remove typing indicator and add the message\r\n      removeTypingIndicator(indicator);\r\n      addMessage(nextSender, generatedText);\r\n      \r\n      // Schedule the next message after a delay\r\n      setTimeout(() => {\r\n        if (isActive) {\r\n          generateNextResponse(nextSender, generatedText);\r\n        }\r\n      }, 2000);\r\n    } catch (err) {\r\n      console.error(\"Error in API call:\", err);\r\n      setError(`API error: ${err.message}`);\r\n      removeTypingIndicator(indicator);\r\n      \r\n      // Use a fallback response\r\n      const fallback = nextSender === 0 ? \r\n        \"I find that perspective fascinating. What do you think about the deeper meaning behind that?\" :\r\n        \"That's awesome! I had a similar experience while hiking in Colorado last summer.\";\r\n      \r\n      addMessage(nextSender, fallback);\r\n      \r\n      // Continue with fallback\r\n      setTimeout(() => {\r\n        if (isActive) {\r\n          generateNextResponse(nextSender, fallback);\r\n        }\r\n      }, 2000);\r\n    }\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsActive(false);\r\n  };\r\n  \r\n  // Add this function to test the API directly\r\n  const testGroqAPI = async () => {\r\n    setTesting(true);\r\n    setTestResponse(null);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log(\"Testing Groq API with key:\", process.env.REACT_APP_GROQ_API_KEY?.substring(0, 5) + \"...\");\r\n      \r\n      const response = await fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${process.env.REACT_APP_GROQ_API_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"llama-3.3-70b-versatile\", // Updated to more powerful model\r\n          messages: [\r\n            { role: \"system\", content: \"You are a helpful assistant.\" },\r\n            { role: \"user\", content: \"Say 'API test successful!' and nothing else.\" }\r\n          ],\r\n          max_tokens: 50,\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      \r\n      console.log(\"Response status:\", response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error(\"API error:\", errorData);\r\n        throw new Error(errorData.error?.message || `API returned ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"API response:\", data);\r\n      \r\n      const text = data.choices[0]?.message?.content || \"No content returned\";\r\n      setTestResponse(text);\r\n    } catch (err) {\r\n      console.error(\"Error testing Groq API:\", err);\r\n      setError(`API test failed: ${err.message}`);\r\n    } finally {\r\n      setTesting(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back to Home\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Match Simulation\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph textAlign=\"center\">\r\n          Watch as AI personalities have a conversation that simulates our matching system.\r\n          Each message is generated by a language model taking on a distinct personality.\r\n        </Typography>\r\n        \r\n        {/* API Test Section */}\r\n        <Box sx={{ my: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Test Groq API Connection\r\n          </Typography>\r\n          <Button \r\n            variant=\"outlined\" \r\n            color=\"primary\"\r\n            onClick={testGroqAPI}\r\n            disabled={testing}\r\n            sx={{ mb: 2 }}\r\n          >\r\n            {testing ? \"Testing...\" : \"Test API Connection\"}\r\n          </Button>\r\n          \r\n          {testResponse && (\r\n            <Paper elevation={1} sx={{ p: 2, maxWidth: '100%', bgcolor: '#e8f5e9', mt: 2 }}>\r\n              <Typography variant=\"body1\">\r\n                <strong>API Response:</strong> {testResponse}\r\n              </Typography>\r\n            </Paper>\r\n          )}\r\n        </Box>\r\n        \r\n        {error && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Start button */}\r\n        {messages.length === 0 && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={startConversation}\r\n              sx={{ py: 2, px: 4 }}\r\n            >\r\n              Start AI Conversation\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Chat container */}\r\n        {messages.length > 0 && (\r\n          <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, mt: 4 }}>\r\n              {personalities.map((personality) => (\r\n                <Box \r\n                  key={personality.id} \r\n                  sx={{ \r\n                    display: 'flex', \r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                    p: 2,\r\n                    borderRadius: 2,\r\n                    bgcolor: `${personality.color}20`,\r\n                    maxWidth: '45%'\r\n                  }}\r\n                >\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <Avatar sx={{ bgcolor: personality.color, mr: 1 }}>\r\n                      {personality.avatar}\r\n                    </Avatar>\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                      {personality.name}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Typography variant=\"body2\" textAlign=\"center\">\r\n                    {personality.id === 0 ? \r\n                      \"Thoughtful, philosophical, enjoys art & literature\" : \r\n                      \"Adventurous, energetic, loves travel & experiences\"}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            \r\n            <Paper \r\n              elevation={3} \r\n              sx={{ \r\n                height: '60vh', \r\n                overflowY: 'auto',\r\n                p: 2,\r\n                backgroundColor: '#f5f5f5'\r\n              }}\r\n            >\r\n              {messages.map((message) => (\r\n                <Box \r\n                  key={message.id}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      maxWidth: '70%',\r\n                      bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\r\n                      color: 'white',\r\n                      p: 2,\r\n                      borderRadius: 2\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {message.isTyping ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : (\r\n                        <>\r\n                          <Typography variant=\"caption\" sx={{ display: 'block', opacity: 0.8, mb: 0.5 }}>\r\n                            {personalities[message.sender].name}\r\n                          </Typography>\r\n                          {message.text}\r\n                        </>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </Paper>\r\n            \r\n            {/* Counter and controls */}\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                {personalities[0].name}: {messageCount[0]}/10 messages\r\n              </Typography>\r\n              \r\n              {isActive && (\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\"\r\n                  onClick={stopConversation}\r\n                >\r\n                  Stop Conversation\r\n                </Button>\r\n              )}\r\n              \r\n              <Typography variant=\"body2\">\r\n                {personalities[1].name}: {messageCount[1]}/10 messages\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {/* Conversation complete message */}\r\n            {isComplete && (\r\n              <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Conversation Complete!\r\n                </Typography>\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => navigate('/create-profile')}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Create Your Profile\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"secondary\"\r\n                    onClick={startConversation}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Start New Conversation\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}