{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Paper, Avatar, Button, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\n// Mock Groq client for development\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst groq = {\n  chat: {\n    completions: {\n      create: async ({\n        messages\n      }) => {\n        console.log(\"Mock Groq API call with:\", messages);\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Get the personality from the system message\n        const isAlex = messages[0].content.includes(\"Alex\");\n\n        // Generate a mock response based on the personality\n        const mockResponses = isAlex ? [\"I find that art often expresses what words cannot. Have you ever had that experience?\", \"In my quieter moments, I often reflect on how our choices shape our identities. What do you think?\", \"There's a beautiful passage in a book I read that relates to this...\", \"I think empathy is one of the most important qualities we can cultivate. How do you connect with others?\", \"I'm drawn to ideas that challenge conventional thinking. What assumptions do you question?\"] : [\"Life is too short not to try new things! What's something you've always wanted to do?\", \"I believe experiences are worth more than possessions. Would you agree?\", \"Last year, I went hiking in the mountains and it completely changed my perspective on...\", \"I think the best connections happen when we're authentic with each other. Don't you think?\", \"I'm always looking for the next adventure. What excites you about the future?\"];\n\n        // Choose a random response\n        const randomIndex = Math.floor(Math.random() * mockResponses.length);\n        return {\n          choices: [{\n            message: {\n              content: mockResponses[randomIndex]\n            }\n          }]\n        };\n      }\n    }\n  }\n};\n\n// Define personality types\nconst personalities = [{\n  name: \"Alex\",\n  avatar: \"A\",\n  color: \"#3f51b5\",\n  systemPrompt: \"You are Alex, a thoughtful and creative person who loves art, literature, and philosophical discussions. You are introspective, kind, and curious about the world. You enjoy deep conversations and asking thought-provoking questions. You speak in a warm, articulate manner and occasionally reference books or art you enjoy. Keep your responses under 100 words.\"\n}, {\n  name: \"Jordan\",\n  avatar: \"J\",\n  color: \"#f50057\",\n  systemPrompt: \"You are Jordan, an energetic and adventurous person who loves outdoor activities, travel, and trying new experiences. You're outgoing, enthusiastic, and have a good sense of humor. You speak in a lively, expressive way and often share stories of your adventures or things you'd like to try. You're optimistic and encouraging of others. Keep your responses under 100 words.\"\n}];\n\n// Sample conversation starters\nconst conversationStarters = [\"What do you think gives life meaning?\", \"If you could travel anywhere, where would you go and why?\", \"What's something you've changed your mind about recently?\", \"Do you think technology is bringing people closer together or pushing them apart?\", \"What's a book or movie that changed how you see the world?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [conversationStarted, setConversationStarted] = useState(false);\n  const [messageCount, setMessageCount] = useState({\n    0: 0,\n    1: 0\n  });\n  const [error, setError] = useState(null);\n  const [isApiReady, setIsApiReady] = useState(true);\n  const messagesEndRef = useRef(null);\n\n  // Function to generate a response using Groq API\n  const generateResponse = async (personalityIndex, context) => {\n    const personality = personalities[personalityIndex];\n    try {\n      var _completion$choices$, _completion$choices$$;\n      // Format the conversation history for context\n      const conversationHistory = context.map((msg, i) => {\n        const role = i % 2 === 0 ? personalityIndex === 0 ? personalities[1].name : personalities[0].name : personality.name;\n        return `${role}: ${msg}`;\n      }).join('\\n');\n\n      // Make the API call to Groq\n      const completion = await groq.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: personality.systemPrompt\n        }, {\n          role: \"user\",\n          content: `You are having a conversation with ${personalityIndex === 0 ? personalities[1].name : personalities[0].name}. Here is the conversation so far:\\n\\n${conversationHistory}\\n\\nRespond to the last message as ${personality.name}. Keep your response under 80 words and stay in character.`\n        }],\n        model: \"llama-3-8b-8192\",\n        temperature: 0.7,\n        max_tokens: 200\n      });\n      return ((_completion$choices$ = completion.choices[0]) === null || _completion$choices$ === void 0 ? void 0 : (_completion$choices$$ = _completion$choices$.message) === null || _completion$choices$$ === void 0 ? void 0 : _completion$choices$$.content) || \"I'm not sure how to respond to that.\";\n    } catch (err) {\n      console.error(\"Error generating response:\", err);\n      setError(\"Couldn't generate a response. Falling back to pre-written messages.\");\n      // Fallback to a simple response if API fails\n      return `I'd love to continue our conversation about ${context[context.length - 1].split(' ').slice(0, 3).join(' ')}...`;\n    }\n  };\n\n  // Scroll to bottom of message container\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Verify API key is present\n  useEffect(() => {\n    if (!process.env.REACT_APP_GROQ_API_KEY) {\n      setIsApiReady(false);\n      setError(\"Groq API key not found. Using pre-written responses instead.\");\n    }\n  }, []);\n\n  // Start the conversation\n  const startConversation = () => {\n    setIsSimulating(true);\n    setConversationStarted(true);\n    setMessages([]);\n    setMessageCount({\n      0: 0,\n      1: 0\n    });\n\n    // Start with a random conversation opener from personality 0\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\n    setMessages([{\n      sender: 0,\n      text: starter\n    }]);\n    setMessageCount({\n      ...messageCount,\n      0: 1\n    });\n\n    // Continue the conversation after a delay\n    setTimeout(() => {\n      continueConversation(0);\n    }, 1000);\n  };\n\n  // Function to continue the conversation\n  const continueConversation = async lastSender => {\n    if (!isSimulating) return;\n\n    // Determine next sender\n    const nextSender = lastSender === 0 ? 1 : 0;\n\n    // Check if we've reached message limit\n    if (messageCount[0] >= 25 || messageCount[1] >= 25) {\n      setIsSimulating(false);\n      return;\n    }\n\n    // Get conversation context (last 5 messages)\n    const context = messages.slice(-5).map(m => m.text);\n    try {\n      // Show typing indicator\n      setMessages(prev => [...prev, {\n        sender: nextSender,\n        text: \"...\"\n      }]);\n\n      // Generate response using Groq API\n      const response = await generateResponse(nextSender, context);\n\n      // Replace typing indicator with actual response\n      setMessages(prev => [...prev.slice(0, -1), {\n        sender: nextSender,\n        text: response\n      }]);\n      setMessageCount(prev => ({\n        ...prev,\n        [nextSender]: prev[nextSender] + 1\n      }));\n\n      // Continue conversation after a delay\n      setTimeout(() => {\n        continueConversation(nextSender);\n      }, 1000);\n    } catch (err) {\n      console.error(\"Error in conversation flow:\", err);\n      setError(\"There was an error in the conversation. Please try again.\");\n      setIsSimulating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Match Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        paragraph: true,\n        textAlign: \"center\",\n        children: \"Watch as two AI personalities have a conversation to see how our matching system works. Each AI has a distinct personality and communication style.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), !conversationStarted && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 26\n          }, this),\n          onClick: startConversation,\n          disabled: !isApiReady,\n          sx: {\n            py: 2,\n            px: 4\n          },\n          children: \"Start AI Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), conversationStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            mt: 4\n          },\n          children: personalities.map((personality, index) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                bgcolor: personality.color,\n                mr: 1\n              },\n              children: personality.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: personality.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '60vh',\n            overflowY: 'auto',\n            p: 2,\n            backgroundColor: '#f5f5f5'\n          },\n          children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                maxWidth: '70%',\n                bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\n                color: 'white',\n                p: 2,\n                borderRadius: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 16,\n                  color: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 25\n                }, this) : message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[0].name, \": \", messageCount[0], \"/25 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[1].name, \": \", messageCount[1], \"/25 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), !isSimulating && conversationStarted && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Conversation Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => navigate('/create-profile'),\n            sx: {\n              mt: 2,\n              mr: 2\n            },\n            children: \"Create Your Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: startConversation,\n            sx: {\n              mt: 2\n            },\n            children: \"Start New Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"HKrkKYspJqGMxFsizSRmdWGgnS4=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Paper","Avatar","Button","CircularProgress","Alert","ArrowBackIcon","PlayArrowIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","groq","chat","completions","create","messages","console","log","Promise","resolve","setTimeout","isAlex","content","includes","mockResponses","randomIndex","Math","floor","random","length","choices","message","personalities","name","avatar","color","systemPrompt","conversationStarters","AIChatSimulation","_s","navigate","setMessages","isSimulating","setIsSimulating","conversationStarted","setConversationStarted","messageCount","setMessageCount","error","setError","isApiReady","setIsApiReady","messagesEndRef","generateResponse","personalityIndex","context","personality","_completion$choices$","_completion$choices$$","conversationHistory","map","msg","i","role","join","completion","model","temperature","max_tokens","err","split","slice","_messagesEndRef$curre","current","scrollIntoView","behavior","process","env","REACT_APP_GROQ_API_KEY","startConversation","starter","sender","text","continueConversation","lastSender","nextSender","m","prev","response","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","paragraph","severity","display","justifyContent","my","size","disabled","px","mt","index","alignItems","bgcolor","mr","elevation","height","overflowY","p","backgroundColor","borderRadius","ref","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\n// Mock Groq client for development\r\nconst groq = {\r\n  chat: {\r\n    completions: {\r\n      create: async ({ messages }) => {\r\n        console.log(\"Mock Groq API call with:\", messages);\r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Get the personality from the system message\r\n        const isAlex = messages[0].content.includes(\"Alex\");\r\n        \r\n        // Generate a mock response based on the personality\r\n        const mockResponses = isAlex ? [\r\n          \"I find that art often expresses what words cannot. Have you ever had that experience?\",\r\n          \"In my quieter moments, I often reflect on how our choices shape our identities. What do you think?\",\r\n          \"There's a beautiful passage in a book I read that relates to this...\",\r\n          \"I think empathy is one of the most important qualities we can cultivate. How do you connect with others?\",\r\n          \"I'm drawn to ideas that challenge conventional thinking. What assumptions do you question?\"\r\n        ] : [\r\n          \"Life is too short not to try new things! What's something you've always wanted to do?\",\r\n          \"I believe experiences are worth more than possessions. Would you agree?\",\r\n          \"Last year, I went hiking in the mountains and it completely changed my perspective on...\",\r\n          \"I think the best connections happen when we're authentic with each other. Don't you think?\",\r\n          \"I'm always looking for the next adventure. What excites you about the future?\"\r\n        ];\r\n        \r\n        // Choose a random response\r\n        const randomIndex = Math.floor(Math.random() * mockResponses.length);\r\n        \r\n        return {\r\n          choices: [\r\n            {\r\n              message: {\r\n                content: mockResponses[randomIndex]\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Define personality types\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    avatar: \"A\",\r\n    color: \"#3f51b5\",\r\n    systemPrompt: \"You are Alex, a thoughtful and creative person who loves art, literature, and philosophical discussions. You are introspective, kind, and curious about the world. You enjoy deep conversations and asking thought-provoking questions. You speak in a warm, articulate manner and occasionally reference books or art you enjoy. Keep your responses under 100 words.\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    avatar: \"J\",\r\n    color: \"#f50057\",\r\n    systemPrompt: \"You are Jordan, an energetic and adventurous person who loves outdoor activities, travel, and trying new experiences. You're outgoing, enthusiastic, and have a good sense of humor. You speak in a lively, expressive way and often share stories of your adventures or things you'd like to try. You're optimistic and encouraging of others. Keep your responses under 100 words.\"\r\n  }\r\n];\r\n\r\n// Sample conversation starters\r\nconst conversationStarters = [\r\n  \"What do you think gives life meaning?\",\r\n  \"If you could travel anywhere, where would you go and why?\",\r\n  \"What's something you've changed your mind about recently?\",\r\n  \"Do you think technology is bringing people closer together or pushing them apart?\",\r\n  \"What's a book or movie that changed how you see the world?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState<{sender: number, text: string}[]>([]);\r\n  const [isSimulating, setIsSimulating] = useState(false);\r\n  const [conversationStarted, setConversationStarted] = useState(false);\r\n  const [messageCount, setMessageCount] = useState({ 0: 0, 1: 0 });\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isApiReady, setIsApiReady] = useState(true);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Function to generate a response using Groq API\r\n  const generateResponse = async (personalityIndex: number, context: string[]) => {\r\n    const personality = personalities[personalityIndex];\r\n    try {\r\n      // Format the conversation history for context\r\n      const conversationHistory = context.map((msg, i) => {\r\n        const role = i % 2 === 0 ? \r\n          (personalityIndex === 0 ? personalities[1].name : personalities[0].name) : \r\n          personality.name;\r\n        return `${role}: ${msg}`;\r\n      }).join('\\n');\r\n      \r\n      // Make the API call to Groq\r\n      const completion = await groq.chat.completions.create({\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: personality.systemPrompt\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: `You are having a conversation with ${personalityIndex === 0 ? personalities[1].name : personalities[0].name}. Here is the conversation so far:\\n\\n${conversationHistory}\\n\\nRespond to the last message as ${personality.name}. Keep your response under 80 words and stay in character.`\r\n          }\r\n        ],\r\n        model: \"llama-3-8b-8192\",\r\n        temperature: 0.7,\r\n        max_tokens: 200,\r\n      });\r\n      \r\n      return completion.choices[0]?.message?.content || \"I'm not sure how to respond to that.\";\r\n    } catch (err) {\r\n      console.error(\"Error generating response:\", err);\r\n      setError(\"Couldn't generate a response. Falling back to pre-written messages.\");\r\n      // Fallback to a simple response if API fails\r\n      return `I'd love to continue our conversation about ${context[context.length - 1].split(' ').slice(0, 3).join(' ')}...`;\r\n    }\r\n  };\r\n  \r\n  // Scroll to bottom of message container\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n  \r\n  // Verify API key is present\r\n  useEffect(() => {\r\n    if (!process.env.REACT_APP_GROQ_API_KEY) {\r\n      setIsApiReady(false);\r\n      setError(\"Groq API key not found. Using pre-written responses instead.\");\r\n    }\r\n  }, []);\r\n  \r\n  // Start the conversation\r\n  const startConversation = () => {\r\n    setIsSimulating(true);\r\n    setConversationStarted(true);\r\n    setMessages([]);\r\n    setMessageCount({ 0: 0, 1: 0 });\r\n    \r\n    // Start with a random conversation opener from personality 0\r\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\r\n    setMessages([{ sender: 0, text: starter }]);\r\n    setMessageCount({ ...messageCount, 0: 1 });\r\n    \r\n    // Continue the conversation after a delay\r\n    setTimeout(() => {\r\n      continueConversation(0);\r\n    }, 1000);\r\n  };\r\n  \r\n  // Function to continue the conversation\r\n  const continueConversation = async (lastSender: number) => {\r\n    if (!isSimulating) return;\r\n    \r\n    // Determine next sender\r\n    const nextSender = lastSender === 0 ? 1 : 0;\r\n    \r\n    // Check if we've reached message limit\r\n    if (messageCount[0] >= 25 || messageCount[1] >= 25) {\r\n      setIsSimulating(false);\r\n      return;\r\n    }\r\n    \r\n    // Get conversation context (last 5 messages)\r\n    const context = messages.slice(-5).map(m => m.text);\r\n    \r\n    try {\r\n      // Show typing indicator\r\n      setMessages(prev => [...prev, { sender: nextSender, text: \"...\" }]);\r\n      \r\n      // Generate response using Groq API\r\n      const response = await generateResponse(nextSender, context);\r\n      \r\n      // Replace typing indicator with actual response\r\n      setMessages(prev => [...prev.slice(0, -1), { sender: nextSender, text: response }]);\r\n      setMessageCount(prev => ({ ...prev, [nextSender]: prev[nextSender] + 1 }));\r\n      \r\n      // Continue conversation after a delay\r\n      setTimeout(() => {\r\n        continueConversation(nextSender);\r\n      }, 1000);\r\n    } catch (err) {\r\n      console.error(\"Error in conversation flow:\", err);\r\n      setError(\"There was an error in the conversation. Please try again.\");\r\n      setIsSimulating(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back to Home\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Match Simulation\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph textAlign=\"center\">\r\n          Watch as two AI personalities have a conversation to see how our matching system works. \r\n          Each AI has a distinct personality and communication style.\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Start button */}\r\n        {!conversationStarted && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={startConversation}\r\n              disabled={!isApiReady}\r\n              sx={{ py: 2, px: 4 }}\r\n            >\r\n              Start AI Conversation\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Chat header with profiles */}\r\n        {conversationStarted && (\r\n          <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, mt: 4 }}>\r\n              {personalities.map((personality, index) => (\r\n                <Box key={index} sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <Avatar sx={{ bgcolor: personality.color, mr: 1 }}>\r\n                    {personality.avatar}\r\n                  </Avatar>\r\n                  <Typography variant=\"subtitle1\">\r\n                    {personality.name}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            \r\n            {/* Chat container */}\r\n            <Paper \r\n              elevation={3} \r\n              sx={{ \r\n                height: '60vh', \r\n                overflowY: 'auto',\r\n                p: 2,\r\n                backgroundColor: '#f5f5f5'\r\n              }}\r\n            >\r\n              {messages.map((message, index) => (\r\n                <Box \r\n                  key={index}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      maxWidth: '70%',\r\n                      bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\r\n                      color: 'white',\r\n                      p: 2,\r\n                      borderRadius: 2\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {message.text === \"...\" ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : (\r\n                        message.text\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </Paper>\r\n            \r\n            {/* Progress indicator */}\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                {personalities[0].name}: {messageCount[0]}/25 messages\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {personalities[1].name}: {messageCount[1]}/25 messages\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {!isSimulating && conversationStarted && (\r\n              <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Conversation Complete!\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={() => navigate('/create-profile')}\r\n                  sx={{ mt: 2, mr: 2 }}\r\n                >\r\n                  Create Your Profile\r\n                </Button>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\"\r\n                  onClick={startConversation}\r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  Start New Conversation\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,SAAS,EACTC,UAAU,EACVC,GAAG,EACHC,KAAK,EACLC,MAAM,EACNC,MAAM,EACNC,gBAAgB,EAEhBC,KAAK,QACA,eAAe;AACtB,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,aAAa,MAAM,+BAA+B;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,IAAI,GAAG;EACXC,IAAI,EAAE;IACJC,WAAW,EAAE;MACXC,MAAM,EAAE,MAAAA,CAAO;QAAEC;MAAS,CAAC,KAAK;QAC9BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;QACjD;QACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;QAEvD;QACA,MAAME,MAAM,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAACO,OAAO,CAACC,QAAQ,CAAC,MAAM,CAAC;;QAEnD;QACA,MAAMC,aAAa,GAAGH,MAAM,GAAG,CAC7B,uFAAuF,EACvF,oGAAoG,EACpG,sEAAsE,EACtE,0GAA0G,EAC1G,4FAA4F,CAC7F,GAAG,CACF,uFAAuF,EACvF,yEAAyE,EACzE,0FAA0F,EAC1F,4FAA4F,EAC5F,+EAA+E,CAChF;;QAED;QACA,MAAMI,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,aAAa,CAACK,MAAM,CAAC;QAEpE,OAAO;UACLC,OAAO,EAAE,CACP;YACEC,OAAO,EAAE;cACPT,OAAO,EAAEE,aAAa,CAACC,WAAW;YACpC;UACF,CAAC;QAEL,CAAC;MACH;IACF;EACF;AACF,CAAC;;AAED;AACA,MAAMO,aAAa,GAAG,CACpB;EACEC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,SAAS;EAChBC,YAAY,EAAE;AAChB,CAAC,EACD;EACEH,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,SAAS;EAChBC,YAAY,EAAE;AAChB,CAAC,CACF;;AAED;AACA,MAAMC,oBAAoB,GAAG,CAC3B,uCAAuC,EACvC,2DAA2D,EAC3D,2DAA2D,EAC3D,mFAAmF,EACnF,4DAA4D,CAC7D;AAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAG5C,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACmB,QAAQ,EAAE0B,WAAW,CAAC,GAAGhD,QAAQ,CAAmC,EAAE,CAAC;EAC9E,MAAM,CAACiD,YAAY,EAAEC,eAAe,CAAC,GAAGlD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpD,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACqD,YAAY,EAAEC,eAAe,CAAC,GAAGtD,QAAQ,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAE,CAAC,CAAC;EAChE,MAAM,CAACuD,KAAK,EAAEC,QAAQ,CAAC,GAAGxD,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACyD,UAAU,EAAEC,aAAa,CAAC,GAAG1D,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM2D,cAAc,GAAGzD,MAAM,CAAiB,IAAI,CAAC;;EAEnD;EACA,MAAM0D,gBAAgB,GAAG,MAAAA,CAAOC,gBAAwB,EAAEC,OAAiB,KAAK;IAC9E,MAAMC,WAAW,GAAGxB,aAAa,CAACsB,gBAAgB,CAAC;IACnD,IAAI;MAAA,IAAAG,oBAAA,EAAAC,qBAAA;MACF;MACA,MAAMC,mBAAmB,GAAGJ,OAAO,CAACK,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAClD,MAAMC,IAAI,GAAGD,CAAC,GAAG,CAAC,KAAK,CAAC,GACrBR,gBAAgB,KAAK,CAAC,GAAGtB,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,GAAGD,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,GACvEuB,WAAW,CAACvB,IAAI;QAClB,OAAO,GAAG8B,IAAI,KAAKF,GAAG,EAAE;MAC1B,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;;MAEb;MACA,MAAMC,UAAU,GAAG,MAAMtD,IAAI,CAACC,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACpDC,QAAQ,EAAE,CACR;UACEgD,IAAI,EAAE,QAAQ;UACdzC,OAAO,EAAEkC,WAAW,CAACpB;QACvB,CAAC,EACD;UACE2B,IAAI,EAAE,MAAM;UACZzC,OAAO,EAAE,sCAAsCgC,gBAAgB,KAAK,CAAC,GAAGtB,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,GAAGD,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,yCAAyC0B,mBAAmB,sCAAsCH,WAAW,CAACvB,IAAI;QACzO,CAAC,CACF;QACDiC,KAAK,EAAE,iBAAiB;QACxBC,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;MACd,CAAC,CAAC;MAEF,OAAO,EAAAX,oBAAA,GAAAQ,UAAU,CAACnC,OAAO,CAAC,CAAC,CAAC,cAAA2B,oBAAA,wBAAAC,qBAAA,GAArBD,oBAAA,CAAuB1B,OAAO,cAAA2B,qBAAA,uBAA9BA,qBAAA,CAAgCpC,OAAO,KAAI,sCAAsC;IAC1F,CAAC,CAAC,OAAO+C,GAAG,EAAE;MACZrD,OAAO,CAACgC,KAAK,CAAC,4BAA4B,EAAEqB,GAAG,CAAC;MAChDpB,QAAQ,CAAC,qEAAqE,CAAC;MAC/E;MACA,OAAO,+CAA+CM,OAAO,CAACA,OAAO,CAAC1B,MAAM,GAAG,CAAC,CAAC,CAACyC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC,KAAK;IACzH;EACF,CAAC;;EAED;EACAtE,SAAS,CAAC,MAAM;IAAA,IAAA8E,qBAAA;IACd,CAAAA,qBAAA,GAAApB,cAAc,CAACqB,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAC5D,QAAQ,CAAC,CAAC;;EAEd;EACArB,SAAS,CAAC,MAAM;IACd,IAAI,CAACkF,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAAE;MACvC3B,aAAa,CAAC,KAAK,CAAC;MACpBF,QAAQ,CAAC,8DAA8D,CAAC;IAC1E;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM8B,iBAAiB,GAAGA,CAAA,KAAM;IAC9BpC,eAAe,CAAC,IAAI,CAAC;IACrBE,sBAAsB,CAAC,IAAI,CAAC;IAC5BJ,WAAW,CAAC,EAAE,CAAC;IACfM,eAAe,CAAC;MAAE,CAAC,EAAE,CAAC;MAAE,CAAC,EAAE;IAAE,CAAC,CAAC;;IAE/B;IACA,MAAMiC,OAAO,GAAG3C,oBAAoB,CAACX,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGS,oBAAoB,CAACR,MAAM,CAAC,CAAC;IAC7FY,WAAW,CAAC,CAAC;MAAEwC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAEF;IAAQ,CAAC,CAAC,CAAC;IAC3CjC,eAAe,CAAC;MAAE,GAAGD,YAAY;MAAE,CAAC,EAAE;IAAE,CAAC,CAAC;;IAE1C;IACA1B,UAAU,CAAC,MAAM;MACf+D,oBAAoB,CAAC,CAAC,CAAC;IACzB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAMA,oBAAoB,GAAG,MAAOC,UAAkB,IAAK;IACzD,IAAI,CAAC1C,YAAY,EAAE;;IAEnB;IACA,MAAM2C,UAAU,GAAGD,UAAU,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;;IAE3C;IACA,IAAItC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,IAAIA,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE;MAClDH,eAAe,CAAC,KAAK,CAAC;MACtB;IACF;;IAEA;IACA,MAAMY,OAAO,GAAGxC,QAAQ,CAACwD,KAAK,CAAC,CAAC,CAAC,CAAC,CAACX,GAAG,CAAC0B,CAAC,IAAIA,CAAC,CAACJ,IAAI,CAAC;IAEnD,IAAI;MACF;MACAzC,WAAW,CAAC8C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEN,MAAM,EAAEI,UAAU;QAAEH,IAAI,EAAE;MAAM,CAAC,CAAC,CAAC;;MAEnE;MACA,MAAMM,QAAQ,GAAG,MAAMnC,gBAAgB,CAACgC,UAAU,EAAE9B,OAAO,CAAC;;MAE5D;MACAd,WAAW,CAAC8C,IAAI,IAAI,CAAC,GAAGA,IAAI,CAAChB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QAAEU,MAAM,EAAEI,UAAU;QAAEH,IAAI,EAAEM;MAAS,CAAC,CAAC,CAAC;MACnFzC,eAAe,CAACwC,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAACF,UAAU,GAAGE,IAAI,CAACF,UAAU,CAAC,GAAG;MAAE,CAAC,CAAC,CAAC;;MAE1E;MACAjE,UAAU,CAAC,MAAM;QACf+D,oBAAoB,CAACE,UAAU,CAAC;MAClC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAOhB,GAAG,EAAE;MACZrD,OAAO,CAACgC,KAAK,CAAC,6BAA6B,EAAEqB,GAAG,CAAC;MACjDpB,QAAQ,CAAC,2DAA2D,CAAC;MACrEN,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEnC,OAAA,CAACX,SAAS;IAAC4F,QAAQ,EAAC,IAAI;IAAAC,QAAA,eACtBlF,OAAA,CAACT,GAAG;MAAC4F,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAF,QAAA,gBACjBlF,OAAA,CAACN,MAAM;QACL2F,SAAS,eAAErF,OAAA,CAACH,aAAa;UAAAyF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QAC7BC,OAAO,EAAEA,CAAA,KAAM1D,QAAQ,CAAC,GAAG,CAAE;QAC7BmD,EAAE,EAAE;UAAEQ,EAAE,EAAE;QAAE,CAAE;QAAAT,QAAA,EACf;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAETzF,OAAA,CAACV,UAAU;QAACsG,OAAO,EAAC,IAAI;QAACC,YAAY;QAACC,SAAS,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAEzD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEbzF,OAAA,CAACV,UAAU;QAACsG,OAAO,EAAC,OAAO;QAACjE,KAAK,EAAC,gBAAgB;QAACoE,SAAS;QAACD,SAAS,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAGhF;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EAEZjD,KAAK,iBACJxC,OAAA,CAACJ,KAAK;QAACoG,QAAQ,EAAC,SAAS;QAACb,EAAE,EAAE;UAAEQ,EAAE,EAAE;QAAE,CAAE;QAAAT,QAAA,EACrC1C;MAAK;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR,EAGA,CAACrD,mBAAmB,iBACnBpC,OAAA,CAACT,GAAG;QAAC4F,EAAE,EAAE;UAAEc,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,QAAQ;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAjB,QAAA,eAC5DlF,OAAA,CAACN,MAAM;UACLkG,OAAO,EAAC,WAAW;UACnBjE,KAAK,EAAC,SAAS;UACfyE,IAAI,EAAC,OAAO;UACZf,SAAS,eAAErF,OAAA,CAACF,aAAa;YAAAwF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAC7BC,OAAO,EAAEnB,iBAAkB;UAC3B8B,QAAQ,EAAE,CAAC3D,UAAW;UACtByC,EAAE,EAAE;YAAEC,EAAE,EAAE,CAAC;YAAEkB,EAAE,EAAE;UAAE,CAAE;UAAApB,QAAA,EACtB;QAED;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAGArD,mBAAmB,iBAClBpC,OAAA,CAAAE,SAAA;QAAAgF,QAAA,gBACElF,OAAA,CAACT,GAAG;UAAC4F,EAAE,EAAE;YAAEc,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE,eAAe;YAAEP,EAAE,EAAE,CAAC;YAAEY,EAAE,EAAE;UAAE,CAAE;UAAArB,QAAA,EACzE1D,aAAa,CAAC4B,GAAG,CAAC,CAACJ,WAAW,EAAEwD,KAAK,kBACpCxG,OAAA,CAACT,GAAG;YAAa4F,EAAE,EAAE;cAAEc,OAAO,EAAE,MAAM;cAAEQ,UAAU,EAAE;YAAS,CAAE;YAAAvB,QAAA,gBAC7DlF,OAAA,CAACP,MAAM;cAAC0F,EAAE,EAAE;gBAAEuB,OAAO,EAAE1D,WAAW,CAACrB,KAAK;gBAAEgF,EAAE,EAAE;cAAE,CAAE;cAAAzB,QAAA,EAC/ClC,WAAW,CAACtB;YAAM;cAAA4D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACb,CAAC,eACTzF,OAAA,CAACV,UAAU;cAACsG,OAAO,EAAC,WAAW;cAAAV,QAAA,EAC5BlC,WAAW,CAACvB;YAAI;cAAA6D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACP,CAAC;UAAA,GANLe,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOV,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGNzF,OAAA,CAACR,KAAK;UACJoH,SAAS,EAAE,CAAE;UACbzB,EAAE,EAAE;YACF0B,MAAM,EAAE,MAAM;YACdC,SAAS,EAAE,MAAM;YACjBC,CAAC,EAAE,CAAC;YACJC,eAAe,EAAE;UACnB,CAAE;UAAA9B,QAAA,GAED3E,QAAQ,CAAC6C,GAAG,CAAC,CAAC7B,OAAO,EAAEiF,KAAK,kBAC3BxG,OAAA,CAACT,GAAG;YAEF4F,EAAE,EAAE;cACFc,OAAO,EAAE,MAAM;cACfC,cAAc,EAAE3E,OAAO,CAACkD,MAAM,KAAK,CAAC,GAAG,YAAY,GAAG,UAAU;cAChEkB,EAAE,EAAE;YACN,CAAE;YAAAT,QAAA,eAEFlF,OAAA,CAACT,GAAG;cACF4F,EAAE,EAAE;gBACFF,QAAQ,EAAE,KAAK;gBACfyB,OAAO,EAAEnF,OAAO,CAACkD,MAAM,KAAK,CAAC,GAAGjD,aAAa,CAAC,CAAC,CAAC,CAACG,KAAK,GAAGH,aAAa,CAAC,CAAC,CAAC,CAACG,KAAK;gBAC/EA,KAAK,EAAE,OAAO;gBACdoF,CAAC,EAAE,CAAC;gBACJE,YAAY,EAAE;cAChB,CAAE;cAAA/B,QAAA,eAEFlF,OAAA,CAACV,UAAU;gBAACsG,OAAO,EAAC,OAAO;gBAAAV,QAAA,EACxB3D,OAAO,CAACmD,IAAI,KAAK,KAAK,gBACrB1E,OAAA,CAACL,gBAAgB;kBAACyG,IAAI,EAAE,EAAG;kBAACzE,KAAK,EAAC;gBAAS;kBAAA2D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,GAE9ClE,OAAO,CAACmD;cACT;gBAAAY,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACS;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV;UAAC,GAvBDe,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAwBP,CACN,CAAC,eACFzF,OAAA;YAAKkH,GAAG,EAAEtE;UAAe;YAAA0C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eAGRzF,OAAA,CAACT,GAAG;UAAC4F,EAAE,EAAE;YAAEc,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE,eAAe;YAAEK,EAAE,EAAE;UAAE,CAAE;UAAArB,QAAA,gBACnElF,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,OAAO;YAAAV,QAAA,GACxB1D,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,EAAC,IAAE,EAACa,YAAY,CAAC,CAAC,CAAC,EAAC,cAC5C;UAAA;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbzF,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,OAAO;YAAAV,QAAA,GACxB1D,aAAa,CAAC,CAAC,CAAC,CAACC,IAAI,EAAC,IAAE,EAACa,YAAY,CAAC,CAAC,CAAC,EAAC,cAC5C;UAAA;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,EAEL,CAACvD,YAAY,IAAIE,mBAAmB,iBACnCpC,OAAA,CAACT,GAAG;UAAC4F,EAAE,EAAE;YAAEoB,EAAE,EAAE,CAAC;YAAET,SAAS,EAAE;UAAS,CAAE;UAAAZ,QAAA,gBACtClF,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,IAAI;YAACC,YAAY;YAAAX,QAAA,EAAC;UAEtC;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbzF,OAAA,CAACN,MAAM;YACLkG,OAAO,EAAC,WAAW;YACnBjE,KAAK,EAAC,SAAS;YACf+D,OAAO,EAAEA,CAAA,KAAM1D,QAAQ,CAAC,iBAAiB,CAAE;YAC3CmD,EAAE,EAAE;cAAEoB,EAAE,EAAE,CAAC;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAzB,QAAA,EACtB;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTzF,OAAA,CAACN,MAAM;YACLkG,OAAO,EAAC,UAAU;YAClBjE,KAAK,EAAC,WAAW;YACjB+D,OAAO,EAAEnB,iBAAkB;YAC3BY,EAAE,EAAE;cAAEoB,EAAE,EAAE;YAAE,CAAE;YAAArB,QAAA,EACf;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN;MAAA,eACD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAAC1D,EAAA,CA/PID,gBAAgB;EAAA,QACH1C,WAAW;AAAA;AAAA+H,EAAA,GADxBrF,gBAAgB;AAiQtB,eAAeA,gBAAgB;AAAC,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}