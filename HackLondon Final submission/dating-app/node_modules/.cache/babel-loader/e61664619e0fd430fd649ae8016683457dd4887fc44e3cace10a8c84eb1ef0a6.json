{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Button, Paper, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Define the two personas for display purposes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst personalities = [{\n  name: \"Alex\",\n  color: \"#3f51b5\",\n  description: \"Thoughtful, philosophical, enjoys deep conversations\"\n}, {\n  name: \"Jordan\",\n  color: \"#f50057\",\n  description: \"Energetic, adventurous, loves sharing experiences\"\n}];\n\n// Simple conversation starters\nconst STARTERS = [\"What gives life meaning?\", \"Where would you travel if you could go anywhere?\", \"Is technology bringing people closer or pushing them apart?\", \"What's a book that changed your view of the world?\", \"What's something you've changed your mind about recently?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [conversation, setConversation] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const [messageCount, setMessageCount] = useState(0);\n\n  // API details\n  const API_ENDPOINT = \"https://api.groq.com/openai/v1/chat/completions\";\n  const API_KEY = process.env.REACT_APP_GROQ_API_KEY;\n  const MODEL = \"llama3-70b-8192\";\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Add a message to the UI\n  const addMessage = (speakerIndex, text) => {\n    const newMessage = {\n      id: Date.now(),\n      speaker: speakerIndex,\n      text: text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  };\n\n  // Get random starter\n  const getStarter = () => {\n    return STARTERS[Math.floor(Math.random() * STARTERS.length)];\n  };\n\n  // Start a new conversation\n  const startConversation = async () => {\n    setMessages([]);\n    setError(null);\n    setIsRunning(true);\n    setIsLoading(false);\n    setMessageCount(0);\n\n    // Choose a random starter from Alex\n    const starter = getStarter();\n    console.log(\"Starting with:\", starter);\n\n    // Add the starter message from Alex\n    addMessage(0, starter);\n\n    // Initialize conversation\n    setConversation(`This is a dating app conversation. You are Jordan, an energetic, adventurous person who loves sharing experiences.\n       Your match Alex just said: \"${starter}\"\n       \n       Respond as Jordan in a conversational style. Keep it under 100 words.`);\n\n    // Get the first response\n    generateResponse();\n  };\n\n  // Generate a response\n  const generateResponse = async () => {\n    if (!isRunning) return;\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      // Determine which speaker is next\n      const nextSpeaker = messages.length % 2 === 0 ? 1 : 0;\n\n      // Add typing indicator\n      setIsLoading(true);\n      addMessage(nextSpeaker, \"...\");\n      console.log(\"Generating response...\");\n      console.log(\"Current conversation:\", conversation);\n\n      // Call the API\n      const response = await fetch(API_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: MODEL,\n          messages: [{\n            role: \"user\",\n            content: conversation\n          }],\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"API error:\", errorText);\n        throw new Error(`API error (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"API response:\", data);\n\n      // Get the generated text\n      const generatedText = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim();\n      if (!generatedText) {\n        throw new Error(\"Empty response from API\");\n      }\n\n      // Remove typing indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Add the response\n      addMessage(nextSpeaker, generatedText);\n      setMessageCount(prev => prev + 1);\n\n      // Update the conversation for the next turn\n      const persona = nextSpeaker === 1 ? \"Alex\" : \"Jordan\";\n      const otherPersona = nextSpeaker === 1 ? \"Jordan\" : \"Alex\";\n      const description = nextSpeaker === 0 ? \"thoughtful, philosophical person who enjoys deep conversations\" : \"energetic, adventurous person who loves sharing experiences\";\n      setConversation(`This is a dating app conversation between Alex and Jordan.\n         \n         Previous messages:\n         ${messages.map(m => `${personalities[m.speaker].name}: ${m.text}`).join('\\n')}\n         ${otherPersona}: ${generatedText}\n         \n         You are ${persona}, a ${description}.\n         Respond to ${otherPersona}'s last message in a conversational style. Keep it under 100 words.`);\n\n      // Continue the conversation after a delay\n      setTimeout(() => {\n        if (isRunning) {\n          generateResponse();\n        }\n      }, 2000);\n    } catch (err) {\n      console.error(\"Error generating response:\", err);\n      setError(`Error: ${err.message}`);\n\n      // Remove typing indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Use fallback responses\n      const nextSpeaker = messages.length % 2 === 0 ? 1 : 0;\n      const fallbacks = nextSpeaker === 0 ? [\"That's an interesting perspective. I often find myself contemplating similar questions when I read philosophy or visit art museums.\", \"I appreciate your enthusiasm. It reminds me of how different experiences can shape our worldview in profound ways.\", \"What a thought-provoking idea. I've been reading about that in several books recently.\"] : [\"That's awesome! I had a similar experience while backpacking through Asia last year. It completely changed my perspective!\", \"I totally get what you mean! Life is all about collecting these amazing experiences and stories, isn't it?\", \"Yes! That reminds me of when I went skydiving for the first time. Have you ever tried anything like that?\"];\n      const fallback = fallbacks[Math.floor(Math.random() * fallbacks.length)];\n      addMessage(nextSpeaker, fallback);\n      setMessageCount(prev => prev + 1);\n\n      // Continue with fallback\n      const persona = nextSpeaker === 1 ? \"Alex\" : \"Jordan\";\n      const otherPersona = nextSpeaker === 1 ? \"Jordan\" : \"Alex\";\n      const description = nextSpeaker === 0 ? \"thoughtful, philosophical person who enjoys deep conversations\" : \"energetic, adventurous person who loves sharing experiences\";\n      setConversation(`This is a dating app conversation between Alex and Jordan.\n         \n         Previous messages:\n         ${messages.map(m => `${personalities[m.speaker].name}: ${m.text}`).join('\\n')}\n         ${otherPersona}: ${fallback}\n         \n         You are ${persona}, a ${description}.\n         Respond to ${otherPersona}'s last message in a conversational style. Keep it under 100 words.`);\n      setTimeout(() => {\n        if (isRunning) {\n          generateResponse();\n        }\n      }, 2000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Conversation Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: 2,\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: startConversation,\n          disabled: isRunning,\n          children: \"Start Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), isRunning && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: stopConversation,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), messageCount > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        textAlign: \"center\",\n        sx: {\n          mb: 2\n        },\n        children: [\"Messages: \", messageCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          height: '60vh',\n          p: 2,\n          mb: 2,\n          overflowY: 'auto',\n          bgcolor: '#f5f5f5'\n        },\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              maxWidth: '80%',\n              bgcolor: personalities[message.speaker].color,\n              color: 'white',\n              p: 2,\n              borderRadius: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                opacity: 0.9,\n                mb: 0.5\n              },\n              children: personalities[message.speaker].name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 16,\n                color: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this) : message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: personalities.map((person, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: person.color\n          },\n          children: [person.name, \": \", messages.filter(m => m.speaker === index && m.text !== \"...\").length, \" messages\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"XE6cnTjSrJBlqZs/Q8rdu23bqXE=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Button","Paper","CircularProgress","Alert","ArrowBackIcon","jsxDEV","_jsxDEV","personalities","name","color","description","STARTERS","AIChatSimulation","_s","navigate","messages","setMessages","isRunning","setIsRunning","isLoading","setIsLoading","error","setError","conversation","setConversation","messagesEndRef","messageCount","setMessageCount","API_ENDPOINT","API_KEY","process","env","REACT_APP_GROQ_API_KEY","MODEL","_messagesEndRef$curre","current","scrollIntoView","behavior","addMessage","speakerIndex","text","newMessage","id","Date","now","speaker","prev","getStarter","Math","floor","random","length","startConversation","starter","console","log","generateResponse","_data$choices","_data$choices$","_data$choices$$messag","_data$choices$$messag2","nextSpeaker","response","fetch","method","headers","body","JSON","stringify","model","role","content","max_tokens","temperature","ok","errorText","Error","status","data","json","generatedText","choices","message","trim","filter","m","persona","otherPersona","map","join","setTimeout","err","fallbacks","fallback","stopConversation","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","severity","display","justifyContent","gap","disabled","elevation","height","p","overflowY","bgcolor","flexDirection","alignItems","borderRadius","opacity","size","ref","person","index","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Define the two personas for display purposes\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    color: \"#3f51b5\",\r\n    description: \"Thoughtful, philosophical, enjoys deep conversations\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    color: \"#f50057\", \r\n    description: \"Energetic, adventurous, loves sharing experiences\"\r\n  }\r\n];\r\n\r\n// Simple conversation starters\r\nconst STARTERS = [\r\n  \"What gives life meaning?\",\r\n  \"Where would you travel if you could go anywhere?\",\r\n  \"Is technology bringing people closer or pushing them apart?\",\r\n  \"What's a book that changed your view of the world?\",\r\n  \"What's something you've changed your mind about recently?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [conversation, setConversation] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n  const [messageCount, setMessageCount] = useState(0);\r\n\r\n  // API details\r\n  const API_ENDPOINT = \"https://api.groq.com/openai/v1/chat/completions\";\r\n  const API_KEY = process.env.REACT_APP_GROQ_API_KEY;\r\n  const MODEL = \"llama3-70b-8192\";\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Add a message to the UI\r\n  const addMessage = (speakerIndex, text) => {\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      speaker: speakerIndex,\r\n      text: text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    return newMessage;\r\n  };\r\n\r\n  // Get random starter\r\n  const getStarter = () => {\r\n    return STARTERS[Math.floor(Math.random() * STARTERS.length)];\r\n  };\r\n\r\n  // Start a new conversation\r\n  const startConversation = async () => {\r\n    setMessages([]);\r\n    setError(null);\r\n    setIsRunning(true);\r\n    setIsLoading(false);\r\n    setMessageCount(0);\r\n    \r\n    // Choose a random starter from Alex\r\n    const starter = getStarter();\r\n    console.log(\"Starting with:\", starter);\r\n    \r\n    // Add the starter message from Alex\r\n    addMessage(0, starter);\r\n    \r\n    // Initialize conversation\r\n    setConversation(\r\n      `This is a dating app conversation. You are Jordan, an energetic, adventurous person who loves sharing experiences.\r\n       Your match Alex just said: \"${starter}\"\r\n       \r\n       Respond as Jordan in a conversational style. Keep it under 100 words.`\r\n    );\r\n    \r\n    // Get the first response\r\n    generateResponse();\r\n  };\r\n\r\n  // Generate a response\r\n  const generateResponse = async () => {\r\n    if (!isRunning) return;\r\n    \r\n    try {\r\n      // Determine which speaker is next\r\n      const nextSpeaker = messages.length % 2 === 0 ? 1 : 0;\r\n      \r\n      // Add typing indicator\r\n      setIsLoading(true);\r\n      addMessage(nextSpeaker, \"...\");\r\n      \r\n      console.log(\"Generating response...\");\r\n      console.log(\"Current conversation:\", conversation);\r\n      \r\n      // Call the API\r\n      const response = await fetch(API_ENDPOINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${API_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: MODEL,\r\n          messages: [\r\n            { role: \"user\", content: conversation }\r\n          ],\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"API error:\", errorText);\r\n        throw new Error(`API error (${response.status}): ${errorText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"API response:\", data);\r\n      \r\n      // Get the generated text\r\n      const generatedText = data.choices?.[0]?.message?.content?.trim();\r\n      \r\n      if (!generatedText) {\r\n        throw new Error(\"Empty response from API\");\r\n      }\r\n      \r\n      // Remove typing indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Add the response\r\n      addMessage(nextSpeaker, generatedText);\r\n      setMessageCount(prev => prev + 1);\r\n      \r\n      // Update the conversation for the next turn\r\n      const persona = nextSpeaker === 1 ? \"Alex\" : \"Jordan\";\r\n      const otherPersona = nextSpeaker === 1 ? \"Jordan\" : \"Alex\";\r\n      const description = nextSpeaker === 0 ? \r\n        \"thoughtful, philosophical person who enjoys deep conversations\" : \r\n        \"energetic, adventurous person who loves sharing experiences\";\r\n        \r\n      setConversation(\r\n        `This is a dating app conversation between Alex and Jordan.\r\n         \r\n         Previous messages:\r\n         ${messages.map(m => `${personalities[m.speaker].name}: ${m.text}`).join('\\n')}\r\n         ${otherPersona}: ${generatedText}\r\n         \r\n         You are ${persona}, a ${description}.\r\n         Respond to ${otherPersona}'s last message in a conversational style. Keep it under 100 words.`\r\n      );\r\n      \r\n      // Continue the conversation after a delay\r\n      setTimeout(() => {\r\n        if (isRunning) {\r\n          generateResponse();\r\n        }\r\n      }, 2000);\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error generating response:\", err);\r\n      setError(`Error: ${err.message}`);\r\n      \r\n      // Remove typing indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Use fallback responses\r\n      const nextSpeaker = messages.length % 2 === 0 ? 1 : 0;\r\n      const fallbacks = nextSpeaker === 0 ? [\r\n        \"That's an interesting perspective. I often find myself contemplating similar questions when I read philosophy or visit art museums.\",\r\n        \"I appreciate your enthusiasm. It reminds me of how different experiences can shape our worldview in profound ways.\",\r\n        \"What a thought-provoking idea. I've been reading about that in several books recently.\"\r\n      ] : [\r\n        \"That's awesome! I had a similar experience while backpacking through Asia last year. It completely changed my perspective!\",\r\n        \"I totally get what you mean! Life is all about collecting these amazing experiences and stories, isn't it?\",\r\n        \"Yes! That reminds me of when I went skydiving for the first time. Have you ever tried anything like that?\"\r\n      ];\r\n      \r\n      const fallback = fallbacks[Math.floor(Math.random() * fallbacks.length)];\r\n      addMessage(nextSpeaker, fallback);\r\n      setMessageCount(prev => prev + 1);\r\n      \r\n      // Continue with fallback\r\n      const persona = nextSpeaker === 1 ? \"Alex\" : \"Jordan\";\r\n      const otherPersona = nextSpeaker === 1 ? \"Jordan\" : \"Alex\";\r\n      const description = nextSpeaker === 0 ? \r\n        \"thoughtful, philosophical person who enjoys deep conversations\" : \r\n        \"energetic, adventurous person who loves sharing experiences\";\r\n        \r\n      setConversation(\r\n        `This is a dating app conversation between Alex and Jordan.\r\n         \r\n         Previous messages:\r\n         ${messages.map(m => `${personalities[m.speaker].name}: ${m.text}`).join('\\n')}\r\n         ${otherPersona}: ${fallback}\r\n         \r\n         You are ${persona}, a ${description}.\r\n         Respond to ${otherPersona}'s last message in a conversational style. Keep it under 100 words.`\r\n      );\r\n      \r\n      setTimeout(() => {\r\n        if (isRunning) {\r\n          generateResponse();\r\n        }\r\n      }, 2000);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Conversation Simulation\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Controls */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 3 }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={startConversation}\r\n            disabled={isRunning}\r\n          >\r\n            Start Conversation\r\n          </Button>\r\n          \r\n          {isRunning && (\r\n            <Button \r\n              variant=\"outlined\" \r\n              color=\"error\"\r\n              onClick={stopConversation}\r\n            >\r\n              Stop\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        \r\n        {/* Message counter */}\r\n        {messageCount > 0 && (\r\n          <Typography variant=\"body2\" textAlign=\"center\" sx={{ mb: 2 }}>\r\n            Messages: {messageCount}\r\n          </Typography>\r\n        )}\r\n        \r\n        {/* Chat display */}\r\n        <Paper \r\n          elevation={3} \r\n          sx={{ \r\n            height: '60vh', \r\n            p: 2, \r\n            mb: 2, \r\n            overflowY: 'auto',\r\n            bgcolor: '#f5f5f5' \r\n          }}\r\n        >\r\n          {messages.map((message) => (\r\n            <Box \r\n              key={message.id}\r\n              sx={{ \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\r\n                mb: 2\r\n              }}\r\n            >\r\n              <Box \r\n                sx={{ \r\n                  maxWidth: '80%', \r\n                  bgcolor: personalities[message.speaker].color,\r\n                  color: 'white',\r\n                  p: 2, \r\n                  borderRadius: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle2\" sx={{ opacity: 0.9, mb: 0.5 }}>\r\n                  {personalities[message.speaker].name}\r\n                </Typography>\r\n                \r\n                <Typography variant=\"body1\">\r\n                  {message.text === \"...\" ? (\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                  ) : message.text}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </Paper>\r\n        \r\n        {/* Stats */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {personalities.map((person, index) => (\r\n            <Typography key={index} variant=\"body2\" sx={{ color: person.color }}>\r\n              {person.name}: {messages.filter(m => m.speaker === index && m.text !== \"...\").length} messages\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}