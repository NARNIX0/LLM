{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Paper, Avatar, Button, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\n// Type declaration for TypeScript\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Define the personalities\nconst personalities = [{\n  id: 0,\n  name: \"Alex\",\n  avatar: \"A\",\n  color: \"#3f51b5\",\n  systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\n}, {\n  id: 1,\n  name: \"Jordan\",\n  avatar: \"J\",\n  color: \"#f50057\",\n  systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\n}];\n\n// Define a message type\n\n// Conversation starters\nconst conversationStarters = [\"What do you think gives life meaning?\", \"If you could travel anywhere, where would you go and why?\", \"What's something you've changed your mind about recently?\", \"Do you think technology is bringing people closer together or pushing them apart?\", \"What's a book or movie that changed how you see the world?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isActive, setIsActive] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [messageCount, setMessageCount] = useState({\n    0: 0,\n    1: 0\n  });\n  const [isComplete, setIsComplete] = useState(false);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Function to start the conversation\n  const startConversation = () => {\n    setIsActive(true);\n    setIsComplete(false);\n    setMessages([]);\n    setMessageCount({\n      0: 0,\n      1: 0\n    });\n\n    // Choose a random starter\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\n\n    // Add first message from Alex (personality 0)\n    addMessage(0, starter);\n\n    // Schedule Jordan's response\n    scheduleNextMessage(0);\n  };\n\n  // Add a new message\n  const addMessage = (sender, text) => {\n    const newMessage = {\n      id: Date.now(),\n      sender,\n      text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setMessageCount(prev => ({\n      ...prev,\n      [sender]: prev[sender] + 1\n    }));\n    return newMessage;\n  };\n\n  // Add a typing indicator\n  const addTypingIndicator = sender => {\n    const indicator = {\n      id: Date.now(),\n      sender,\n      text: \"...\",\n      isTyping: true\n    };\n    setMessages(prev => [...prev, indicator]);\n    return indicator;\n  };\n\n  // Remove the typing indicator\n  const removeTypingIndicator = indicator => {\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\n  };\n\n  // Generate a response using fetch to call the OpenAI API directly\n  const generateLLMResponse = async (personalityIndex, conversationHistory) => {\n    try {\n      var _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      // Convert message history to a format the LLM can understand\n      const formattedHistory = conversationHistory.map(msg => {\n        if (msg.isTyping) return null; // Skip typing indicators\n\n        const role = \"user\";\n        const name = personalities[msg.sender].name;\n        return {\n          role: role,\n          content: `${name}: ${msg.text}`\n        };\n      }).filter(Boolean); // Remove null entries\n\n      // Add system prompt for the current personality\n      const currentPersonality = personalities[personalityIndex];\n\n      // Prepare the request to the language model\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY || \"sk-...\"}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: `${currentPersonality.systemPrompt} You're having a conversation with ${personalities[personalityIndex === 0 ? 1 : 0].name}. Respond to the last message in the conversation as ${currentPersonality.name}. Keep your response concise (under 80 words).`\n          }, ...formattedHistory],\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        var _data$error;\n        throw new Error(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || \"Failed to generate response\");\n      }\n\n      // Extract the generated text\n      const generatedText = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim();\n\n      // Remove the name prefix if the LLM included it\n      const namePrefix = `${currentPersonality.name}: `;\n      const cleanedText = generatedText.startsWith(namePrefix) ? generatedText.substring(namePrefix.length) : generatedText;\n      return cleanedText;\n    } catch (error) {\n      console.error(\"Error generating LLM response:\", error);\n\n      // Fallback responses based on personality\n      if (personalityIndex === 0) {\n        return \"I find that question intriguing. I'm curious about your perspective on this.\";\n      } else {\n        return \"That's something I've been thinking about too! Would love to hear more of your thoughts.\";\n      }\n    }\n  };\n\n  // Schedule the next message\n  const scheduleNextMessage = lastSender => {\n    // Determine next sender (alternate between 0 and 1)\n    const nextSender = lastSender === 0 ? 1 : 0;\n\n    // Check if we've reached the message limit\n    if (messageCount[nextSender] >= 10) {\n      setIsComplete(true);\n      setIsActive(false);\n      return;\n    }\n\n    // Show typing indicator after a short delay\n    setTimeout(() => {\n      if (!isActive) return;\n      const indicator = addTypingIndicator(nextSender);\n\n      // Generate a response\n      (async () => {\n        try {\n          // Use current messages for context\n          const response = await generateLLMResponse(nextSender, messages);\n\n          // Stop if conversation was halted during API call\n          if (!isActive) return;\n\n          // Remove typing indicator\n          removeTypingIndicator(indicator);\n\n          // Add the message\n          addMessage(nextSender, response);\n\n          // Schedule the next message\n          scheduleNextMessage(nextSender);\n        } catch (err) {\n          console.error(\"Error in generation:\", err);\n          removeTypingIndicator(indicator);\n          setError(\"Failed to generate response\");\n          setIsActive(false);\n        }\n      })();\n    }, 500); // Delay before typing starts\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsActive(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Match Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        paragraph: true,\n        textAlign: \"center\",\n        children: \"Watch as a single LLM plays both AI personalities in conversation. The AI adapts to each distinct personality and communication style.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), messages.length === 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 26\n          }, this),\n          onClick: startConversation,\n          sx: {\n            py: 2,\n            px: 4\n          },\n          children: \"Start AI Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            mt: 4\n          },\n          children: personalities.map(personality => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                bgcolor: personality.color,\n                mr: 1\n              },\n              children: personality.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: personality.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 19\n            }, this)]\n          }, personality.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '60vh',\n            overflowY: 'auto',\n            p: 2,\n            backgroundColor: '#f5f5f5'\n          },\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                maxWidth: '70%',\n                bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\n                color: 'white',\n                p: 2,\n                borderRadius: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.isTyping ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 16,\n                  color: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    sx: {\n                      display: 'block',\n                      opacity: 0.8,\n                      mb: 0.5\n                    },\n                    children: personalities[message.sender].name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 325,\n                    columnNumber: 27\n                  }, this), message.text]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[0].name, \": \", messageCount[0], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this), isActive && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: stopConversation,\n            children: \"Stop Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[1].name, \": \", messageCount[1], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this), isComplete && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Conversation Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => navigate('/create-profile'),\n              sx: {\n                mx: 1\n              },\n              children: \"Create Your Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"secondary\",\n              onClick: startConversation,\n              sx: {\n                mx: 1\n              },\n              children: \"Start New Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"Ue+xLFM6pEuOSGCXnB++daPt7yY=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Container","Typography","Box","Paper","Avatar","Button","CircularProgress","Alert","ArrowBackIcon","PlayArrowIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","personalities","id","name","avatar","color","systemPrompt","conversationStarters","AIChatSimulation","_s","navigate","messages","setMessages","isActive","setIsActive","error","setError","messagesEndRef","messageCount","setMessageCount","isComplete","setIsComplete","_messagesEndRef$curre","current","scrollIntoView","behavior","startConversation","starter","Math","floor","random","length","addMessage","scheduleNextMessage","sender","text","newMessage","Date","now","prev","addTypingIndicator","indicator","isTyping","removeTypingIndicator","filter","m","generateLLMResponse","personalityIndex","conversationHistory","_data$choices$","_data$choices$$messag","_data$choices$$messag2","formattedHistory","map","msg","role","content","Boolean","currentPersonality","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","max_tokens","temperature","data","json","ok","_data$error","Error","message","generatedText","choices","trim","namePrefix","cleanedText","startsWith","substring","console","lastSender","nextSender","setTimeout","err","stopConversation","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","paragraph","severity","display","justifyContent","my","size","px","mt","personality","alignItems","bgcolor","mr","elevation","height","overflowY","p","backgroundColor","borderRadius","opacity","ref","mx","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\n// Type declaration for TypeScript\r\ndeclare const process: any;\r\n\r\n// Define the personalities\r\nconst personalities = [\r\n  {\r\n    id: 0,\r\n    name: \"Alex\",\r\n    avatar: \"A\",\r\n    color: \"#3f51b5\",\r\n    systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Jordan\",\r\n    avatar: \"J\",\r\n    color: \"#f50057\",\r\n    systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\r\n  }\r\n];\r\n\r\n// Define a message type\r\ninterface Message {\r\n  id: number;\r\n  sender: number; // 0 for Alex, 1 for Jordan\r\n  text: string;\r\n  isTyping?: boolean;\r\n}\r\n\r\n// Conversation starters\r\nconst conversationStarters = [\r\n  \"What do you think gives life meaning?\",\r\n  \"If you could travel anywhere, where would you go and why?\",\r\n  \"What's something you've changed your mind about recently?\",\r\n  \"Do you think technology is bringing people closer together or pushing them apart?\",\r\n  \"What's a book or movie that changed how you see the world?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [messageCount, setMessageCount] = useState({ 0: 0, 1: 0 });\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  \r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  // Function to start the conversation\r\n  const startConversation = () => {\r\n    setIsActive(true);\r\n    setIsComplete(false);\r\n    setMessages([]);\r\n    setMessageCount({ 0: 0, 1: 0 });\r\n    \r\n    // Choose a random starter\r\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\r\n    \r\n    // Add first message from Alex (personality 0)\r\n    addMessage(0, starter);\r\n    \r\n    // Schedule Jordan's response\r\n    scheduleNextMessage(0);\r\n  };\r\n  \r\n  // Add a new message\r\n  const addMessage = (sender: number, text: string) => {\r\n    const newMessage: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    setMessageCount(prev => ({ ...prev, [sender]: prev[sender] + 1 }));\r\n    \r\n    return newMessage;\r\n  };\r\n  \r\n  // Add a typing indicator\r\n  const addTypingIndicator = (sender: number) => {\r\n    const indicator: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text: \"...\",\r\n      isTyping: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, indicator]);\r\n    return indicator;\r\n  };\r\n  \r\n  // Remove the typing indicator\r\n  const removeTypingIndicator = (indicator: Message) => {\r\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\r\n  };\r\n  \r\n  // Generate a response using fetch to call the OpenAI API directly\r\n  const generateLLMResponse = async (personalityIndex: number, conversationHistory: Message[]) => {\r\n    try {\r\n      // Convert message history to a format the LLM can understand\r\n      const formattedHistory = conversationHistory.map(msg => {\r\n        if (msg.isTyping) return null; // Skip typing indicators\r\n        \r\n        const role = \"user\";\r\n        const name = personalities[msg.sender].name;\r\n        return {\r\n          role: role,\r\n          content: `${name}: ${msg.text}`\r\n        };\r\n      }).filter(Boolean); // Remove null entries\r\n      \r\n      // Add system prompt for the current personality\r\n      const currentPersonality = personalities[personalityIndex];\r\n      \r\n      // Prepare the request to the language model\r\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY || \"sk-...\"}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-3.5-turbo\",\r\n          messages: [\r\n            { \r\n              role: \"system\", \r\n              content: `${currentPersonality.systemPrompt} You're having a conversation with ${personalities[personalityIndex === 0 ? 1 : 0].name}. Respond to the last message in the conversation as ${currentPersonality.name}. Keep your response concise (under 80 words).` \r\n            },\r\n            ...formattedHistory\r\n          ],\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error?.message || \"Failed to generate response\");\r\n      }\r\n      \r\n      // Extract the generated text\r\n      const generatedText = data.choices[0]?.message?.content?.trim();\r\n      \r\n      // Remove the name prefix if the LLM included it\r\n      const namePrefix = `${currentPersonality.name}: `;\r\n      const cleanedText = generatedText.startsWith(namePrefix)\r\n        ? generatedText.substring(namePrefix.length)\r\n        : generatedText;\r\n        \r\n      return cleanedText;\r\n    } catch (error) {\r\n      console.error(\"Error generating LLM response:\", error);\r\n      \r\n      // Fallback responses based on personality\r\n      if (personalityIndex === 0) {\r\n        return \"I find that question intriguing. I'm curious about your perspective on this.\";\r\n      } else {\r\n        return \"That's something I've been thinking about too! Would love to hear more of your thoughts.\";\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Schedule the next message\r\n  const scheduleNextMessage = (lastSender: number) => {\r\n    // Determine next sender (alternate between 0 and 1)\r\n    const nextSender = lastSender === 0 ? 1 : 0;\r\n    \r\n    // Check if we've reached the message limit\r\n    if (messageCount[nextSender] >= 10) {\r\n      setIsComplete(true);\r\n      setIsActive(false);\r\n      return;\r\n    }\r\n    \r\n    // Show typing indicator after a short delay\r\n    setTimeout(() => {\r\n      if (!isActive) return;\r\n      \r\n      const indicator = addTypingIndicator(nextSender);\r\n      \r\n      // Generate a response\r\n      (async () => {\r\n        try {\r\n          // Use current messages for context\r\n          const response = await generateLLMResponse(nextSender, messages);\r\n          \r\n          // Stop if conversation was halted during API call\r\n          if (!isActive) return;\r\n          \r\n          // Remove typing indicator\r\n          removeTypingIndicator(indicator);\r\n          \r\n          // Add the message\r\n          addMessage(nextSender, response);\r\n          \r\n          // Schedule the next message\r\n          scheduleNextMessage(nextSender);\r\n        } catch (err) {\r\n          console.error(\"Error in generation:\", err);\r\n          removeTypingIndicator(indicator);\r\n          setError(\"Failed to generate response\");\r\n          setIsActive(false);\r\n        }\r\n      })();\r\n    }, 500); // Delay before typing starts\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsActive(false);\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back to Home\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Match Simulation\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph textAlign=\"center\">\r\n          Watch as a single LLM plays both AI personalities in conversation. \r\n          The AI adapts to each distinct personality and communication style.\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Start button */}\r\n        {messages.length === 0 && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={startConversation}\r\n              sx={{ py: 2, px: 4 }}\r\n            >\r\n              Start AI Conversation\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Chat container */}\r\n        {messages.length > 0 && (\r\n          <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, mt: 4 }}>\r\n              {personalities.map((personality) => (\r\n                <Box key={personality.id} sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <Avatar sx={{ bgcolor: personality.color, mr: 1 }}>\r\n                    {personality.avatar}\r\n                  </Avatar>\r\n                  <Typography variant=\"subtitle1\">\r\n                    {personality.name}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            \r\n            <Paper \r\n              elevation={3} \r\n              sx={{ \r\n                height: '60vh', \r\n                overflowY: 'auto',\r\n                p: 2,\r\n                backgroundColor: '#f5f5f5'\r\n              }}\r\n            >\r\n              {messages.map((message) => (\r\n                <Box \r\n                  key={message.id}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      maxWidth: '70%',\r\n                      bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\r\n                      color: 'white',\r\n                      p: 2,\r\n                      borderRadius: 2\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {message.isTyping ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : (\r\n                        <>\r\n                          <Typography variant=\"caption\" sx={{ display: 'block', opacity: 0.8, mb: 0.5 }}>\r\n                            {personalities[message.sender].name}\r\n                          </Typography>\r\n                          {message.text}\r\n                        </>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </Paper>\r\n            \r\n            {/* Counter and controls */}\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                {personalities[0].name}: {messageCount[0]}/10 messages\r\n              </Typography>\r\n              \r\n              {isActive && (\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\"\r\n                  onClick={stopConversation}\r\n                >\r\n                  Stop Conversation\r\n                </Button>\r\n              )}\r\n              \r\n              <Typography variant=\"body2\">\r\n                {personalities[1].name}: {messageCount[1]}/10 messages\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {/* Conversation complete message */}\r\n            {isComplete && (\r\n              <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Conversation Complete!\r\n                </Typography>\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => navigate('/create-profile')}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Create Your Profile\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"secondary\"\r\n                    onClick={startConversation}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Start New Conversation\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}