{"ast":null,"code":"import axios from 'axios';\nimport { generatePlaceholderConversation } from '../utils/placeholderPersonality.ts';\nimport { getUserProfile, getUserSystemPrompt } from '../utils/userProfile.ts';\nconst API_URL = 'http://localhost:3001/api';\n\n// Define types\n\n// API functions\nexport const createProfile = async formData => {\n  const response = await axios.post(`${API_URL}/create-profile`, formData);\n  return response.data;\n};\nexport const saveQuestionAnswer = async data => {\n  // Store answers in localStorage for the placeholder conversation\n  try {\n    const currentAnswers = JSON.parse(localStorage.getItem('userAnswers') || '[]');\n    currentAnswers[data.questionNumber - 1] = data.answer;\n    localStorage.setItem('userAnswers', JSON.stringify(currentAnswers));\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }\n  const response = await axios.post(`${API_URL}/save-question-answer`, data);\n  return response.data;\n};\nexport const simulateConversation = async (user1Id, user2Id) => {\n  // If user2Id is 'placeholder', use the placeholder simulation\n  if (user2Id === 'placeholder') {\n    try {\n      // Get user profile and generate system prompt\n      const userProfile = getUserProfile();\n      const systemPrompt = getUserSystemPrompt(userProfile);\n\n      // Get user answers from localStorage or use profile answers if available\n      const userAnswers = JSON.parse(localStorage.getItem('userAnswers') || '[]');\n      const answersToUse = userAnswers.length > 0 ? userAnswers : userProfile.answers;\n\n      // Pass the system prompt to the placeholder conversation generator\n      const result = generatePlaceholderConversation(answersToUse, systemPrompt);\n      return {\n        matchId: 999,\n        // Placeholder ID\n        compatibilityScore: result.compatibilityScore,\n        transcript: result.transcript\n      };\n    } catch (error) {\n      console.error('Error in placeholder simulation:', error);\n      throw error;\n    }\n  }\n\n  // For regular matches, use the API\n  const response = await axios.post(`${API_URL}/simulate-conversation`, {\n    user1Id,\n    user2Id\n  });\n  return response.data;\n};\nexport const getMatches = async userId => {\n  const response = await axios.get(`${API_URL}/matches/${userId}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","generatePlaceholderConversation","getUserProfile","getUserSystemPrompt","API_URL","createProfile","formData","response","post","data","saveQuestionAnswer","currentAnswers","JSON","parse","localStorage","getItem","questionNumber","answer","setItem","stringify","error","console","simulateConversation","user1Id","user2Id","userProfile","systemPrompt","userAnswers","answersToUse","length","answers","result","matchId","compatibilityScore","transcript","getMatches","userId","get"],"sources":["C:/Users/omals/Documents/hacklondon 2025/dating-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { generatePlaceholderConversation } from '../utils/placeholderPersonality.ts';\nimport { getUserProfile, getUserSystemPrompt } from '../utils/userProfile.ts';\n\nconst API_URL = 'http://localhost:3001/api';\n\n// Define types\nexport interface User {\n  id: number;\n  name: string;\n  age: number;\n  interests: string;\n  profilePicture?: string;\n}\n\nexport interface QuestionAnswer {\n  userId: number;\n  questionNumber: number;\n  answer: string;\n}\n\nexport interface Match {\n  id: number;\n  compatibilityScore: number;\n  matchUserId: number;\n  name: string;\n  age: number;\n  interests: string;\n  profilePicture?: string;\n  conversationTranscript: string;\n}\n\n// API functions\nexport const createProfile = async (\n  formData: FormData\n): Promise<{id: number; message: string}> => {\n  const response = await axios.post(`${API_URL}/create-profile`, formData);\n  return response.data;\n};\n\nexport const saveQuestionAnswer = async (\n  data: QuestionAnswer\n): Promise<{id: number; message: string}> => {\n  // Store answers in localStorage for the placeholder conversation\n  try {\n    const currentAnswers = JSON.parse(localStorage.getItem('userAnswers') || '[]');\n    currentAnswers[data.questionNumber - 1] = data.answer;\n    localStorage.setItem('userAnswers', JSON.stringify(currentAnswers));\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }\n\n  const response = await axios.post(`${API_URL}/save-question-answer`, data);\n  return response.data;\n};\n\nexport const simulateConversation = async (\n  user1Id: number,\n  user2Id: number\n): Promise<{matchId: number; compatibilityScore: number; transcript: string}> => {\n  // If user2Id is 'placeholder', use the placeholder simulation\n  if (user2Id === 'placeholder') {\n    try {\n      // Get user profile and generate system prompt\n      const userProfile = getUserProfile();\n      const systemPrompt = getUserSystemPrompt(userProfile);\n      \n      // Get user answers from localStorage or use profile answers if available\n      const userAnswers = JSON.parse(localStorage.getItem('userAnswers') || '[]');\n      const answersToUse = userAnswers.length > 0 ? userAnswers : userProfile.answers;\n      \n      // Pass the system prompt to the placeholder conversation generator\n      const result = generatePlaceholderConversation(answersToUse, systemPrompt);\n      \n      return {\n        matchId: 999, // Placeholder ID\n        compatibilityScore: result.compatibilityScore,\n        transcript: result.transcript\n      };\n    } catch (error) {\n      console.error('Error in placeholder simulation:', error);\n      throw error;\n    }\n  }\n  \n  // For regular matches, use the API\n  const response = await axios.post(`${API_URL}/simulate-conversation`, {\n    user1Id,\n    user2Id\n  });\n  return response.data;\n};\n\nexport const getMatches = async (userId: number): Promise<{matches: Match[]}> => {\n  const response = await axios.get(`${API_URL}/matches/${userId}`);\n  return response.data;\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,+BAA+B,QAAQ,oCAAoC;AACpF,SAASC,cAAc,EAAEC,mBAAmB,QAAQ,yBAAyB;AAE7E,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;;AA0BA;AACA,OAAO,MAAMC,aAAa,GAAG,MAC3BC,QAAkB,IACyB;EAC3C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGJ,OAAO,iBAAiB,EAAEE,QAAQ,CAAC;EACxE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAChCD,IAAoB,IACuB;EAC3C;EACA,IAAI;IACF,MAAME,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;IAC9EJ,cAAc,CAACF,IAAI,CAACO,cAAc,GAAG,CAAC,CAAC,GAAGP,IAAI,CAACQ,MAAM;IACrDH,YAAY,CAACI,OAAO,CAAC,aAAa,EAAEN,IAAI,CAACO,SAAS,CAACR,cAAc,CAAC,CAAC;EACrE,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;EAEA,MAAMb,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGJ,OAAO,uBAAuB,EAAEK,IAAI,CAAC;EAC1E,OAAOF,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMa,oBAAoB,GAAG,MAAAA,CAClCC,OAAe,EACfC,OAAe,KACgE;EAC/E;EACA,IAAIA,OAAO,KAAK,aAAa,EAAE;IAC7B,IAAI;MACF;MACA,MAAMC,WAAW,GAAGvB,cAAc,CAAC,CAAC;MACpC,MAAMwB,YAAY,GAAGvB,mBAAmB,CAACsB,WAAW,CAAC;;MAErD;MACA,MAAME,WAAW,GAAGf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;MAC3E,MAAMa,YAAY,GAAGD,WAAW,CAACE,MAAM,GAAG,CAAC,GAAGF,WAAW,GAAGF,WAAW,CAACK,OAAO;;MAE/E;MACA,MAAMC,MAAM,GAAG9B,+BAA+B,CAAC2B,YAAY,EAAEF,YAAY,CAAC;MAE1E,OAAO;QACLM,OAAO,EAAE,GAAG;QAAE;QACdC,kBAAkB,EAAEF,MAAM,CAACE,kBAAkB;QAC7CC,UAAU,EAAEH,MAAM,CAACG;MACrB,CAAC;IACH,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMb,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGJ,OAAO,wBAAwB,EAAE;IACpEmB,OAAO;IACPC;EACF,CAAC,CAAC;EACF,OAAOjB,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAM0B,UAAU,GAAG,MAAOC,MAAc,IAAkC;EAC/E,MAAM7B,QAAQ,GAAG,MAAMP,KAAK,CAACqC,GAAG,CAAC,GAAGjC,OAAO,YAAYgC,MAAM,EAAE,CAAC;EAChE,OAAO7B,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}