{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Button, Paper, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Simple configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GROQ_API_KEY = process.env.REACT_APP_GROQ_API_KEY;\nconst API_ENDPOINT = \"https://api.groq.com/openai/v1/chat/completions\";\nconst MODEL = \"llama3-70b-8192\";\n\n// Define the two personalities\nconst personalities = [{\n  name: \"Alex\",\n  color: \"#3f51b5\",\n  description: \"Thoughtful, philosophical, enjoys deep conversations\"\n}, {\n  name: \"Jordan\",\n  color: \"#f50057\",\n  description: \"Energetic, adventurous, loves sharing experiences\"\n}];\n\n// Simple conversation starters\nconst STARTERS = [\"What gives life meaning?\", \"Where would you travel if you could go anywhere?\", \"Is technology bringing people closer or pushing them apart?\", \"What's a book that changed your view of the world?\", \"What's something you've changed your mind about recently?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [exchangeCount, setExchangeCount] = useState(0);\n  const [autoAdvance, setAutoAdvance] = useState(true);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Start the conversation - now just gets one response\n  const startConversation = async () => {\n    setMessages([]);\n    setError(null);\n    setIsRunning(true);\n    setExchangeCount(0);\n    setConversationHistory([]);\n\n    // Choose a random starter\n    const starter = STARTERS[Math.floor(Math.random() * STARTERS.length)];\n    console.log(\"Starting with:\", starter);\n\n    // Add the starter message from Alex\n    addMessage(0, starter);\n\n    // Initialize conversation history\n    const initialHistory = [{\n      role: \"user\",\n      content: starter\n    }];\n    setConversationHistory(initialHistory);\n\n    // Get the first response\n    await generateResponse(0, starter, 1);\n  };\n\n  // Add a message to the conversation\n  const addMessage = (speakerIndex, text) => {\n    const newMessage = {\n      id: Date.now(),\n      speaker: speakerIndex,\n      text: text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  };\n\n  // Create a prompt for the API based on personality\n  const createPrompt = (currentSpeaker, lastSpeaker, lastMessage) => {\n    const current = personalities[currentSpeaker];\n    const last = personalities[lastSpeaker];\n    return `You are ${current.name} who is ${current.description}.\n    \n    ${last.name} just said to you: \"${lastMessage}\"\n    \n    Respond as ${current.name}, keeping your response under 80 words and staying in character.\n    Be concise but authentic to your personality.`;\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsRunning(false);\n  };\n\n  // New function to generate a response from an LLM\n  const generateResponse = async (lastSpeaker, lastMessage, currentSpeaker) => {\n    if (!isRunning) return;\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      // Show loading state\n      setIsLoading(true);\n      addMessage(currentSpeaker, \"...\");\n\n      // Create prompt based on conversation history and personality\n      const prompt = createPrompt(currentSpeaker, lastSpeaker, lastMessage);\n      console.log(`Generating response from ${personalities[currentSpeaker].name}...`);\n      console.log(\"Full prompt:\", prompt);\n\n      // Call the API\n      const response = await fetch(API_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${GROQ_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: MODEL,\n          messages: [{\n            role: \"user\",\n            content: prompt\n          }],\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n\n      // Handle errors\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"API error response:\", errorText);\n        throw new Error(`API error (${response.status}): ${errorText}`);\n      }\n\n      // Process the response\n      const data = await response.json();\n      console.log(`Response from ${personalities[currentSpeaker].name}:`, data);\n      const responseText = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim();\n      if (!responseText) {\n        throw new Error(\"Empty response from API\");\n      }\n\n      // Replace loading message with actual response\n      setMessages(prev => {\n        const newMessages = [...prev];\n        // Replace the last message (loading indicator)\n        newMessages[newMessages.length - 1] = {\n          id: Date.now(),\n          speaker: currentSpeaker,\n          text: responseText\n        };\n        return newMessages;\n      });\n\n      // Add to conversation history\n      const updatedHistory = [...conversationHistory, {\n        role: \"assistant\",\n        content: `${personalities[currentSpeaker].name}: ${responseText}`\n      }];\n      setConversationHistory(updatedHistory);\n\n      // Increment exchange count if we've completed a full exchange\n      if (currentSpeaker === 1) {\n        setExchangeCount(prev => prev + 1);\n      }\n\n      // Continue conversation if needed\n      if (autoAdvance && exchangeCount < 4) {\n        // Determine next speaker (toggle between 0 and 1)\n        const nextSpeaker = currentSpeaker === 0 ? 1 : 0;\n\n        // Schedule next response after a delay\n        setTimeout(() => {\n          generateResponse(currentSpeaker, responseText, nextSpeaker);\n        }, 2000);\n      } else {\n        // End the conversation if we've reached the limit\n        if (exchangeCount >= 4) {\n          console.log(\"Conversation complete!\");\n        }\n      }\n    } catch (err) {\n      console.error(\"API error:\", err);\n\n      // Use fallback responses based on personality\n      const fallback = currentSpeaker === 0 ? \"That's a fascinating perspective. I've been reading about that in several philosophical works recently. I wonder how this relates to our search for meaning in a complex world.\" : \"Wow! That reminds me of this amazing adventure I had last summer. I love how experiences like that can completely transform our outlook on life!\";\n\n      // Replace loading message with fallback\n      setMessages(prev => {\n        const newMessages = [...prev];\n        newMessages[newMessages.length - 1] = {\n          id: Date.now(),\n          speaker: currentSpeaker,\n          text: fallback\n        };\n        return newMessages;\n      });\n\n      // Add fallback to history\n      const updatedHistory = [...conversationHistory, {\n        role: \"assistant\",\n        content: `${personalities[currentSpeaker].name}: ${fallback}`\n      }];\n      setConversationHistory(updatedHistory);\n\n      // Continue with fallback if needed\n      if (autoAdvance && exchangeCount < 4) {\n        const nextSpeaker = currentSpeaker === 0 ? 1 : 0;\n        setTimeout(() => {\n          generateResponse(currentSpeaker, fallback, nextSpeaker);\n        }, 2000);\n      }\n      setError(`API error: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n      if (exchangeCount >= 4) {\n        setIsRunning(false);\n      }\n    }\n  };\n\n  // Add a manual continue button\n  const continueConversation = () => {\n    if (!isRunning || messages.length < 2) return;\n\n    // Get the last message\n    const lastMessage = messages[messages.length - 1];\n    const lastSpeaker = lastMessage.speaker;\n    const nextSpeaker = lastSpeaker === 0 ? 1 : 0;\n\n    // Generate next response\n    generateResponse(lastSpeaker, lastMessage.text, nextSpeaker);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Conversation Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: 2,\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: startConversation,\n          disabled: isRunning,\n          children: \"Start New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), messages.length > 0 && !isLoading && exchangeCount < 4 && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          onClick: continueConversation,\n          disabled: isLoading || !isRunning,\n          children: \"Continue Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), isRunning && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: stopConversation,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        textAlign: \"center\",\n        sx: {\n          mb: 2\n        },\n        children: [\"Conversation exchanges: \", exchangeCount, \"/4\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          height: '60vh',\n          p: 2,\n          mb: 2,\n          overflowY: 'auto',\n          bgcolor: '#f5f5f5'\n        },\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              maxWidth: '80%',\n              bgcolor: personalities[message.speaker].color,\n              color: 'white',\n              p: 2,\n              borderRadius: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                opacity: 0.9,\n                mb: 0.5\n              },\n              children: personalities[message.speaker].name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 16,\n                color: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this) : message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: personalities.map((person, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: person.color\n          },\n          children: [person.name, \": \", messages.filter(m => m.speaker === index && m.text !== \"...\").length, \" messages\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"ZqzGCI2NwhnhXo/WFLXDH9EF5qc=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Button","Paper","CircularProgress","Alert","ArrowBackIcon","jsxDEV","_jsxDEV","GROQ_API_KEY","process","env","REACT_APP_GROQ_API_KEY","API_ENDPOINT","MODEL","personalities","name","color","description","STARTERS","AIChatSimulation","_s","navigate","messages","setMessages","isRunning","setIsRunning","isLoading","setIsLoading","error","setError","messagesEndRef","conversationHistory","setConversationHistory","exchangeCount","setExchangeCount","autoAdvance","setAutoAdvance","_messagesEndRef$curre","current","scrollIntoView","behavior","startConversation","starter","Math","floor","random","length","console","log","addMessage","initialHistory","role","content","generateResponse","speakerIndex","text","newMessage","id","Date","now","speaker","prev","createPrompt","currentSpeaker","lastSpeaker","lastMessage","last","stopConversation","_data$choices","_data$choices$","_data$choices$$messag","_data$choices$$messag2","prompt","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","temperature","ok","errorText","Error","status","data","json","responseText","choices","message","trim","newMessages","updatedHistory","nextSpeaker","setTimeout","err","fallback","continueConversation","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","severity","display","justifyContent","gap","disabled","elevation","height","p","overflowY","bgcolor","map","flexDirection","alignItems","borderRadius","opacity","size","ref","person","index","filter","m","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Simple configuration\r\nconst GROQ_API_KEY = process.env.REACT_APP_GROQ_API_KEY;\r\nconst API_ENDPOINT = \"https://api.groq.com/openai/v1/chat/completions\";\r\nconst MODEL = \"llama3-70b-8192\";\r\n\r\n// Define the two personalities\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    color: \"#3f51b5\",\r\n    description: \"Thoughtful, philosophical, enjoys deep conversations\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    color: \"#f50057\", \r\n    description: \"Energetic, adventurous, loves sharing experiences\"\r\n  }\r\n];\r\n\r\n// Simple conversation starters\r\nconst STARTERS = [\r\n  \"What gives life meaning?\",\r\n  \"Where would you travel if you could go anywhere?\",\r\n  \"Is technology bringing people closer or pushing them apart?\",\r\n  \"What's a book that changed your view of the world?\",\r\n  \"What's something you've changed your mind about recently?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\n  const [exchangeCount, setExchangeCount] = useState(0);\r\n  const [autoAdvance, setAutoAdvance] = useState(true);\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Start the conversation - now just gets one response\r\n  const startConversation = async () => {\r\n    setMessages([]);\r\n    setError(null);\r\n    setIsRunning(true);\r\n    setExchangeCount(0);\r\n    setConversationHistory([]);\r\n    \r\n    // Choose a random starter\r\n    const starter = STARTERS[Math.floor(Math.random() * STARTERS.length)];\r\n    console.log(\"Starting with:\", starter);\r\n    \r\n    // Add the starter message from Alex\r\n    addMessage(0, starter);\r\n    \r\n    // Initialize conversation history\r\n    const initialHistory = [{ role: \"user\", content: starter }];\r\n    setConversationHistory(initialHistory);\r\n    \r\n    // Get the first response\r\n    await generateResponse(0, starter, 1);\r\n  };\r\n\r\n  // Add a message to the conversation\r\n  const addMessage = (speakerIndex, text) => {\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      speaker: speakerIndex,\r\n      text: text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    return newMessage;\r\n  };\r\n\r\n  // Create a prompt for the API based on personality\r\n  const createPrompt = (currentSpeaker, lastSpeaker, lastMessage) => {\r\n    const current = personalities[currentSpeaker];\r\n    const last = personalities[lastSpeaker];\r\n    \r\n    return `You are ${current.name} who is ${current.description}.\r\n    \r\n    ${last.name} just said to you: \"${lastMessage}\"\r\n    \r\n    Respond as ${current.name}, keeping your response under 80 words and staying in character.\r\n    Be concise but authentic to your personality.`;\r\n  };\r\n\r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  // New function to generate a response from an LLM\r\n  const generateResponse = async (lastSpeaker, lastMessage, currentSpeaker) => {\r\n    if (!isRunning) return;\r\n    \r\n    try {\r\n      // Show loading state\r\n      setIsLoading(true);\r\n      addMessage(currentSpeaker, \"...\");\r\n      \r\n      // Create prompt based on conversation history and personality\r\n      const prompt = createPrompt(currentSpeaker, lastSpeaker, lastMessage);\r\n      \r\n      console.log(`Generating response from ${personalities[currentSpeaker].name}...`);\r\n      console.log(\"Full prompt:\", prompt);\r\n      \r\n      // Call the API\r\n      const response = await fetch(API_ENDPOINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${GROQ_API_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: MODEL,\r\n          messages: [{ role: \"user\", content: prompt }],\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      \r\n      // Handle errors\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"API error response:\", errorText);\r\n        throw new Error(`API error (${response.status}): ${errorText}`);\r\n      }\r\n      \r\n      // Process the response\r\n      const data = await response.json();\r\n      console.log(`Response from ${personalities[currentSpeaker].name}:`, data);\r\n      const responseText = data.choices?.[0]?.message?.content?.trim();\r\n      \r\n      if (!responseText) {\r\n        throw new Error(\"Empty response from API\");\r\n      }\r\n      \r\n      // Replace loading message with actual response\r\n      setMessages(prev => {\r\n        const newMessages = [...prev];\r\n        // Replace the last message (loading indicator)\r\n        newMessages[newMessages.length - 1] = {\r\n          id: Date.now(),\r\n          speaker: currentSpeaker,\r\n          text: responseText\r\n        };\r\n        return newMessages;\r\n      });\r\n      \r\n      // Add to conversation history\r\n      const updatedHistory = [...conversationHistory, \r\n        { role: \"assistant\", content: `${personalities[currentSpeaker].name}: ${responseText}` }\r\n      ];\r\n      setConversationHistory(updatedHistory);\r\n      \r\n      // Increment exchange count if we've completed a full exchange\r\n      if (currentSpeaker === 1) {\r\n        setExchangeCount(prev => prev + 1);\r\n      }\r\n      \r\n      // Continue conversation if needed\r\n      if (autoAdvance && exchangeCount < 4) {\r\n        // Determine next speaker (toggle between 0 and 1)\r\n        const nextSpeaker = currentSpeaker === 0 ? 1 : 0;\r\n        \r\n        // Schedule next response after a delay\r\n        setTimeout(() => {\r\n          generateResponse(currentSpeaker, responseText, nextSpeaker);\r\n        }, 2000);\r\n      } else {\r\n        // End the conversation if we've reached the limit\r\n        if (exchangeCount >= 4) {\r\n          console.log(\"Conversation complete!\");\r\n        }\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error(\"API error:\", err);\r\n      \r\n      // Use fallback responses based on personality\r\n      const fallback = currentSpeaker === 0 ? \r\n        \"That's a fascinating perspective. I've been reading about that in several philosophical works recently. I wonder how this relates to our search for meaning in a complex world.\" :\r\n        \"Wow! That reminds me of this amazing adventure I had last summer. I love how experiences like that can completely transform our outlook on life!\";\r\n      \r\n      // Replace loading message with fallback\r\n      setMessages(prev => {\r\n        const newMessages = [...prev];\r\n        newMessages[newMessages.length - 1] = {\r\n          id: Date.now(),\r\n          speaker: currentSpeaker,\r\n          text: fallback\r\n        };\r\n        return newMessages;\r\n      });\r\n      \r\n      // Add fallback to history\r\n      const updatedHistory = [...conversationHistory, \r\n        { role: \"assistant\", content: `${personalities[currentSpeaker].name}: ${fallback}` }\r\n      ];\r\n      setConversationHistory(updatedHistory);\r\n      \r\n      // Continue with fallback if needed\r\n      if (autoAdvance && exchangeCount < 4) {\r\n        const nextSpeaker = currentSpeaker === 0 ? 1 : 0;\r\n        setTimeout(() => {\r\n          generateResponse(currentSpeaker, fallback, nextSpeaker);\r\n        }, 2000);\r\n      }\r\n      \r\n      setError(`API error: ${err.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n      if (exchangeCount >= 4) {\r\n        setIsRunning(false);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Add a manual continue button\r\n  const continueConversation = () => {\r\n    if (!isRunning || messages.length < 2) return;\r\n    \r\n    // Get the last message\r\n    const lastMessage = messages[messages.length - 1];\r\n    const lastSpeaker = lastMessage.speaker;\r\n    const nextSpeaker = lastSpeaker === 0 ? 1 : 0;\r\n    \r\n    // Generate next response\r\n    generateResponse(lastSpeaker, lastMessage.text, nextSpeaker);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Conversation Simulation\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Controls */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 3 }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={startConversation}\r\n            disabled={isRunning}\r\n          >\r\n            Start New Conversation\r\n          </Button>\r\n          \r\n          {messages.length > 0 && !isLoading && exchangeCount < 4 && (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              onClick={continueConversation}\r\n              disabled={isLoading || !isRunning}\r\n            >\r\n              Continue Conversation\r\n            </Button>\r\n          )}\r\n          \r\n          {isRunning && (\r\n            <Button \r\n              variant=\"outlined\" \r\n              color=\"error\"\r\n              onClick={stopConversation}\r\n            >\r\n              Stop\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        \r\n        {/* Exchange counter */}\r\n        {messages.length > 0 && (\r\n          <Typography variant=\"body2\" textAlign=\"center\" sx={{ mb: 2 }}>\r\n            Conversation exchanges: {exchangeCount}/4\r\n          </Typography>\r\n        )}\r\n        \r\n        {/* Chat display */}\r\n        <Paper \r\n          elevation={3} \r\n          sx={{ \r\n            height: '60vh', \r\n            p: 2, \r\n            mb: 2, \r\n            overflowY: 'auto',\r\n            bgcolor: '#f5f5f5' \r\n          }}\r\n        >\r\n          {messages.map((message) => (\r\n            <Box \r\n              key={message.id}\r\n              sx={{ \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\r\n                mb: 2\r\n              }}\r\n            >\r\n              <Box \r\n                sx={{ \r\n                  maxWidth: '80%', \r\n                  bgcolor: personalities[message.speaker].color,\r\n                  color: 'white',\r\n                  p: 2, \r\n                  borderRadius: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle2\" sx={{ opacity: 0.9, mb: 0.5 }}>\r\n                  {personalities[message.speaker].name}\r\n                </Typography>\r\n                \r\n                <Typography variant=\"body1\">\r\n                  {message.text === \"...\" ? (\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                  ) : message.text}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </Paper>\r\n        \r\n        {/* Stats */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {personalities.map((person, index) => (\r\n            <Typography key={index} variant=\"body2\" sx={{ color: person.color }}>\r\n              {person.name}: {messages.filter(m => m.speaker === index && m.text !== \"...\").length} messages\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}