{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\MatchesScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Card, CardContent, Button, Grid, Avatar, Chip, CircularProgress, Divider, Paper, Rating } from '@mui/material';\nimport PersonIcon from '@mui/icons-material/Person';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport { getMatches } from '../services/api.ts';\nimport { placeholderPersonality } from '../utils/placeholderPersonality.ts';\nimport { populateDemoData, isDemoDataPopulated, getDemoMatches } from '../utils/fakeDemoData.ts';\nimport { isUserProfileInitialized } from '../utils/userProfile.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchesScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [matches, setMatches] = useState([]);\n  const [showPlaceholder, setShowPlaceholder] = useState(false);\n  const [isLiveReplay, setIsLiveReplay] = useState(false);\n  const [replayMessages, setReplayMessages] = useState([]);\n  const [isReplayComplete, setIsReplayComplete] = useState(false);\n  const [activeChatbot, setActiveChatbot] = useState(null);\n\n  // Get user ID - if profile is initialized, use the stored ID\n  const userId = localStorage.getItem('currentUserId') || '1';\n\n  // Check if we should show the placeholder match from conversation\n  useEffect(() => {\n    const checkPlaceholderConversation = () => {\n      // Check URL parameters or localStorage to see if a conversation was just completed\n      const conversationCompleted = localStorage.getItem('conversationCompleted') === 'true';\n      if (conversationCompleted) {\n        setShowPlaceholder(true);\n        // Reset the flag\n        localStorage.removeItem('conversationCompleted');\n      }\n    };\n    checkPlaceholderConversation();\n  }, []);\n\n  // Load matches data - from API or demo data\n  useEffect(() => {\n    const fetchMatches = async () => {\n      try {\n        // First, make sure we have demo data populated\n        if (!isDemoDataPopulated()) {\n          populateDemoData();\n        }\n\n        // Get all demo matches\n        let allMatches = getDemoMatches();\n\n        // If user profile is initialized, use their ID for API calls\n        if (isUserProfileInitialized()) {\n          try {\n            const response = await getMatches(parseInt(userId));\n            if (response.matches && response.matches.length > 0) {\n              // In a real app, we might merge the API and demo data\n              // For simplicity, we'll just append the API matches to our demo matches\n              allMatches = [...allMatches, ...response.matches];\n            }\n          } catch (error) {\n            console.error('Error fetching API matches:', error);\n            // Continue with demo matches\n          }\n        }\n\n        // If we have the placeholder conversation match (Alex), add it\n        if (showPlaceholder) {\n          // Get compatibility score from localStorage or use a default\n          const compatibilityScore = parseInt(localStorage.getItem('placeholderCompatibilityScore') || '85', 10);\n          const placeholderMatch = {\n            id: 999,\n            matchUserId: 999,\n            name: placeholderPersonality.name,\n            age: placeholderPersonality.age,\n            interests: placeholderPersonality.interests.join(', '),\n            profilePicture: '',\n            compatibilityScore: compatibilityScore,\n            conversationTranscript: 'See the full transcript for details.'\n          };\n\n          // Add the placeholder at the beginning for emphasis\n          allMatches = [placeholderMatch, ...allMatches];\n        }\n        setMatches(allMatches);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching matches:', error);\n        // If all else fails, use minimal demo data\n        setMatches([{\n          id: 101,\n          matchUserId: 101,\n          name: 'Jamie',\n          age: 26,\n          interests: 'Photography, Travel, Cooking',\n          profilePicture: 'https://source.unsplash.com/random/400x400/?portrait',\n          compatibilityScore: 88,\n          conversationTranscript: 'This is a sample conversation transcript.'\n        }]);\n      }\n    };\n    fetchMatches();\n  }, [userId, showPlaceholder]);\n  const handleViewConversation = matchId => {\n    // For demo or placeholder matches, navigate to transcript\n    handleViewTranscript(matchId);\n  };\n  const handleViewTranscript = matchId => {\n    // If it's the placeholder match, use 'placeholder' as the ID\n    if (matchId === 999) {\n      navigate('/transcript/placeholder');\n    } else {\n      navigate(`/transcript/${matchId}`);\n    }\n  };\n\n  // Function to render compatibility score as hearts\n  const renderCompatibilityScore = score => {\n    // Convert score to 0-5 range for Rating component\n    const ratingScore = score / 100 * 5;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        my: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Rating, {\n        value: ratingScore,\n        readOnly: true,\n        precision: 0.5,\n        icon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          fontSize: \"inherit\",\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this),\n        emptyIcon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          fontSize: \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          ml: 1\n        },\n        children: [Math.round(score), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to handle live chat replay\n  const handleLiveChatReplay = match => {\n    var _currentMatch$convers;\n    setIsLiveReplay(true);\n    setReplayMessages([]);\n    setIsReplayComplete(false);\n\n    // Use either the active chatbot or create a message array from the match's transcript\n    const currentMatch = match || activeChatbot;\n    const allMessages = (currentMatch === null || currentMatch === void 0 ? void 0 : (_currentMatch$convers = currentMatch.conversationTranscript) === null || _currentMatch$convers === void 0 ? void 0 : _currentMatch$convers.split('\\n')) || [];\n    let messageIndex = 0;\n    const displayNextMessage = () => {\n      if (messageIndex < allMessages.length) {\n        setReplayMessages(prev => [...prev, allMessages[messageIndex]]);\n        messageIndex++;\n        setTimeout(displayNextMessage, 1000); // 1 second delay between messages\n      } else {\n        setIsReplayComplete(true);\n      }\n    };\n    displayNextMessage();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"Your AI-Generated Matches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"Based on your answers to the 36 questions, our AI has found these compatible matches for you.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this) : matches.length > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        sx: {\n          mt: 2\n        },\n        children: matches.map(match => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            elevation: 3,\n            className: \"match-card\",\n            sx: {\n              transition: 'transform 0.3s, box-shadow 0.3s',\n              '&:hover': {\n                transform: 'translateY(-8px)',\n                boxShadow: 8\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                  src: match.profilePicture,\n                  sx: {\n                    width: 120,\n                    height: 120,\n                    mb: 2,\n                    bgcolor: match.id === 999 ? 'secondary.main' : 'primary.main'\n                  },\n                  children: match.name[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  component: \"h2\",\n                  gutterBottom: true,\n                  children: [match.name, \", \", match.age]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    justifyContent: 'center',\n                    gap: 0.5,\n                    mb: 1\n                  },\n                  children: match.interests.split(', ').slice(0, 3).map((interest, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                    label: interest,\n                    size: \"small\",\n                    color: match.id === 999 ? \"secondary\" : \"primary\",\n                    variant: \"outlined\"\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 23\n                }, this), renderCompatibilityScore(match.compatibilityScore)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                sx: {\n                  my: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  mt: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  startIcon: /*#__PURE__*/_jsxDEV(ChatIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 36\n                  }, this),\n                  onClick: () => handleLiveChatReplay(match),\n                  children: \"Live Chat Replay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  startIcon: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 36\n                  }, this),\n                  onClick: () => handleViewTranscript(match.matchUserId),\n                  children: \"Full Transcript\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 21\n              }, this), isLiveReplay && match.id === ((activeChatbot === null || activeChatbot === void 0 ? void 0 : activeChatbot.id) || -1) && /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  p: 2,\n                  bgcolor: 'background.paper',\n                  borderRadius: 1,\n                  boxShadow: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  gutterBottom: true,\n                  children: [\"Live Chat Replay \", !isReplayComplete && /*#__PURE__*/_jsxDEV(Box, {\n                    component: \"span\",\n                    sx: {\n                      display: 'inline-block',\n                      ml: 1\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n                      size: 16\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 263,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    maxHeight: 300,\n                    overflowY: 'auto',\n                    pt: 1\n                  },\n                  children: replayMessages.map((message, index) => /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    sx: {\n                      mb: 1,\n                      p: 1,\n                      bgcolor: index % 2 === 0 ? 'primary.light' : 'secondary.light',\n                      borderRadius: 1,\n                      color: index % 2 === 0 ? 'primary.contrastText' : 'secondary.contrastText'\n                    },\n                    children: message\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 25\n                }, this), isReplayComplete && /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  variant: \"outlined\",\n                  sx: {\n                    mt: 2\n                  },\n                  onClick: () => setIsLiveReplay(false),\n                  children: \"Close Replay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this)\n        }, match.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 4,\n          textAlign: 'center',\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          color: \"text.secondary\",\n          gutterBottom: true,\n          children: \"No matches found yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: \"Complete your profile and answer the 36 questions to get matches.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 26\n          }, this),\n          sx: {\n            mt: 2\n          },\n          onClick: () => navigate('/create-profile'),\n          children: \"Create Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchesScreen, \"4xSKPkZIzc9AFe5RVw4Gl1AoVyo=\", false, function () {\n  return [useNavigate];\n});\n_c = MatchesScreen;\nexport default MatchesScreen;\nvar _c;\n$RefreshReg$(_c, \"MatchesScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Container","Typography","Box","Card","CardContent","Button","Grid","Avatar","Chip","CircularProgress","Divider","Paper","Rating","PersonIcon","FavoriteIcon","ChatIcon","getMatches","placeholderPersonality","populateDemoData","isDemoDataPopulated","getDemoMatches","isUserProfileInitialized","jsxDEV","_jsxDEV","MatchesScreen","_s","navigate","loading","setLoading","matches","setMatches","showPlaceholder","setShowPlaceholder","isLiveReplay","setIsLiveReplay","replayMessages","setReplayMessages","isReplayComplete","setIsReplayComplete","activeChatbot","setActiveChatbot","userId","localStorage","getItem","checkPlaceholderConversation","conversationCompleted","removeItem","fetchMatches","allMatches","response","parseInt","length","error","console","compatibilityScore","placeholderMatch","id","matchUserId","name","age","interests","join","profilePicture","conversationTranscript","handleViewConversation","matchId","handleViewTranscript","renderCompatibilityScore","score","ratingScore","sx","display","alignItems","justifyContent","my","children","value","readOnly","precision","icon","fontSize","color","fileName","_jsxFileName","lineNumber","columnNumber","emptyIcon","variant","ml","Math","round","handleLiveChatReplay","match","_currentMatch$convers","currentMatch","allMessages","split","messageIndex","displayNextMessage","prev","setTimeout","maxWidth","py","component","gutterBottom","textAlign","size","container","spacing","mt","map","item","xs","md","lg","elevation","className","transition","transform","boxShadow","flexDirection","mb","src","width","height","bgcolor","flexWrap","gap","slice","interest","index","label","startIcon","onClick","p","borderRadius","maxHeight","overflowY","pt","message","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/MatchesScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  Avatar,\n  Chip,\n  CircularProgress,\n  Divider,\n  Paper,\n  Rating\n} from '@mui/material';\nimport PersonIcon from '@mui/icons-material/Person';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport { getMatches, Match } from '../services/api.ts';\nimport { placeholderPersonality } from '../utils/placeholderPersonality.ts';\nimport { populateDemoData, isDemoDataPopulated, getDemoMatches } from '../utils/fakeDemoData.ts';\nimport { isUserProfileInitialized } from '../utils/userProfile.ts';\n\nconst MatchesScreen: React.FC = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [matches, setMatches] = useState<Match[]>([]);\n  const [showPlaceholder, setShowPlaceholder] = useState(false);\n  const [isLiveReplay, setIsLiveReplay] = useState(false);\n  const [replayMessages, setReplayMessages] = useState<string[]>([]);\n  const [isReplayComplete, setIsReplayComplete] = useState(false);\n  const [activeChatbot, setActiveChatbot] = useState<any>(null);\n  \n  // Get user ID - if profile is initialized, use the stored ID\n  const userId = localStorage.getItem('currentUserId') || '1';\n  \n  // Check if we should show the placeholder match from conversation\n  useEffect(() => {\n    const checkPlaceholderConversation = () => {\n      // Check URL parameters or localStorage to see if a conversation was just completed\n      const conversationCompleted = localStorage.getItem('conversationCompleted') === 'true';\n      \n      if (conversationCompleted) {\n        setShowPlaceholder(true);\n        // Reset the flag\n        localStorage.removeItem('conversationCompleted');\n      }\n    };\n    \n    checkPlaceholderConversation();\n  }, []);\n\n  // Load matches data - from API or demo data\n  useEffect(() => {\n    const fetchMatches = async () => {\n      try {\n        // First, make sure we have demo data populated\n        if (!isDemoDataPopulated()) {\n          populateDemoData();\n        }\n        \n        // Get all demo matches\n        let allMatches = getDemoMatches();\n        \n        // If user profile is initialized, use their ID for API calls\n        if (isUserProfileInitialized()) {\n          try {\n            const response = await getMatches(parseInt(userId));\n            if (response.matches && response.matches.length > 0) {\n              // In a real app, we might merge the API and demo data\n              // For simplicity, we'll just append the API matches to our demo matches\n              allMatches = [...allMatches, ...response.matches];\n            }\n          } catch (error) {\n            console.error('Error fetching API matches:', error);\n            // Continue with demo matches\n          }\n        }\n        \n        // If we have the placeholder conversation match (Alex), add it\n        if (showPlaceholder) {\n          // Get compatibility score from localStorage or use a default\n          const compatibilityScore = parseInt(localStorage.getItem('placeholderCompatibilityScore') || '85', 10);\n          \n          const placeholderMatch: Match = {\n            id: 999,\n            matchUserId: 999,\n            name: placeholderPersonality.name,\n            age: placeholderPersonality.age,\n            interests: placeholderPersonality.interests.join(', '),\n            profilePicture: '',\n            compatibilityScore: compatibilityScore,\n            conversationTranscript: 'See the full transcript for details.'\n          };\n          \n          // Add the placeholder at the beginning for emphasis\n          allMatches = [placeholderMatch, ...allMatches];\n        }\n        \n        setMatches(allMatches);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching matches:', error);\n        // If all else fails, use minimal demo data\n        setMatches([\n          {\n            id: 101,\n            matchUserId: 101,\n            name: 'Jamie',\n            age: 26,\n            interests: 'Photography, Travel, Cooking',\n            profilePicture: 'https://source.unsplash.com/random/400x400/?portrait',\n            compatibilityScore: 88,\n            conversationTranscript: 'This is a sample conversation transcript.'\n          }\n        ]);\n      }\n    };\n\n    fetchMatches();\n  }, [userId, showPlaceholder]);\n\n  const handleViewConversation = (matchId: number) => {\n    // For demo or placeholder matches, navigate to transcript\n    handleViewTranscript(matchId);\n  };\n\n  const handleViewTranscript = (matchId: number) => {\n    // If it's the placeholder match, use 'placeholder' as the ID\n    if (matchId === 999) {\n      navigate('/transcript/placeholder');\n    } else {\n      navigate(`/transcript/${matchId}`);\n    }\n  };\n\n  // Function to render compatibility score as hearts\n  const renderCompatibilityScore = (score: number) => {\n    // Convert score to 0-5 range for Rating component\n    const ratingScore = (score / 100) * 5;\n    return (\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', my: 1 }}>\n        <Rating \n          value={ratingScore} \n          readOnly \n          precision={0.5}\n          icon={<FavoriteIcon fontSize=\"inherit\" color=\"error\" />}\n          emptyIcon={<FavoriteIcon fontSize=\"inherit\" />}\n        />\n        <Typography variant=\"h6\" sx={{ ml: 1 }}>\n          {Math.round(score)}%\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Function to handle live chat replay\n  const handleLiveChatReplay = (match) => {\n    setIsLiveReplay(true);\n    setReplayMessages([]);\n    setIsReplayComplete(false);\n    \n    // Use either the active chatbot or create a message array from the match's transcript\n    const currentMatch = match || activeChatbot;\n    const allMessages = currentMatch?.conversationTranscript?.split('\\n') || [];\n    let messageIndex = 0;\n    \n    const displayNextMessage = () => {\n      if (messageIndex < allMessages.length) {\n        setReplayMessages(prev => [...prev, allMessages[messageIndex]]);\n        messageIndex++;\n        setTimeout(displayNextMessage, 1000); // 1 second delay between messages\n      } else {\n        setIsReplayComplete(true);\n      }\n    };\n    \n    displayNextMessage();\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ py: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom textAlign=\"center\">\n          Your AI-Generated Matches\n        </Typography>\n        \n        <Typography variant=\"subtitle1\" color=\"text.secondary\" gutterBottom textAlign=\"center\">\n          Based on your answers to the 36 questions, our AI has found these compatible matches for you.\n        </Typography>\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 8 }}>\n            <CircularProgress size={60} />\n          </Box>\n        ) : matches.length > 0 ? (\n          <Grid container spacing={4} sx={{ mt: 2 }}>\n            {matches.map((match) => (\n              <Grid item xs={12} md={6} lg={4} key={match.id}>\n                <Card elevation={3} className=\"match-card\" sx={{\n                  transition: 'transform 0.3s, box-shadow 0.3s',\n                  '&:hover': {\n                    transform: 'translateY(-8px)',\n                    boxShadow: 8,\n                  },\n                }}>\n                  <CardContent>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 2 }}>\n                      <Avatar \n                        src={match.profilePicture} \n                        sx={{ width: 120, height: 120, mb: 2, bgcolor: match.id === 999 ? 'secondary.main' : 'primary.main' }}\n                      >\n                        {match.name[0]}\n                      </Avatar>\n                      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                        {match.name}, {match.age}\n                      </Typography>\n                      \n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 0.5, mb: 1 }}>\n                        {match.interests.split(', ').slice(0, 3).map((interest, index) => (\n                          <Chip\n                            key={index}\n                            label={interest}\n                            size=\"small\"\n                            color={match.id === 999 ? \"secondary\" : \"primary\"}\n                            variant=\"outlined\"\n                          />\n                        ))}\n                      </Box>\n                      \n                      {renderCompatibilityScore(match.compatibilityScore)}\n                    </Box>\n                    \n                    <Divider sx={{ my: 2 }} />\n                    \n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\n                      <Button \n                        variant=\"outlined\" \n                        color=\"primary\"\n                        startIcon={<ChatIcon />}\n                        onClick={() => handleLiveChatReplay(match)}\n                      >\n                        Live Chat Replay\n                      </Button>\n                      \n                      <Button \n                        variant=\"contained\" \n                        color=\"primary\"\n                        startIcon={<FavoriteIcon />}\n                        onClick={() => handleViewTranscript(match.matchUserId)}\n                      >\n                        Full Transcript\n                      </Button>\n                    </Box>\n\n                    {isLiveReplay && match.id === (activeChatbot?.id || -1) && (\n                      <Box sx={{ mt: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, boxShadow: 1 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                          Live Chat Replay {!isReplayComplete && \n                            <Box component=\"span\" sx={{ display: 'inline-block', ml: 1 }}>\n                              <CircularProgress size={16} />\n                            </Box>\n                          }\n                        </Typography>\n                        \n                        <Box sx={{ maxHeight: 300, overflowY: 'auto', pt: 1 }}>\n                          {replayMessages.map((message, index) => (\n                            <Typography \n                              key={index} \n                              variant=\"body2\" \n                              sx={{ \n                                mb: 1, \n                                p: 1, \n                                bgcolor: index % 2 === 0 ? 'primary.light' : 'secondary.light',\n                                borderRadius: 1,\n                                color: index % 2 === 0 ? 'primary.contrastText' : 'secondary.contrastText' \n                              }}\n                            >\n                              {message}\n                            </Typography>\n                          ))}\n                        </Box>\n                        \n                        {isReplayComplete && (\n                          <Button \n                            size=\"small\" \n                            variant=\"outlined\" \n                            sx={{ mt: 2 }}\n                            onClick={() => setIsLiveReplay(false)}\n                          >\n                            Close Replay\n                          </Button>\n                        )}\n                      </Box>\n                    )}\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        ) : (\n          <Paper sx={{ p: 4, textAlign: 'center', mt: 4 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No matches found yet.\n            </Typography>\n            <Typography variant=\"body1\">\n              Complete your profile and answer the 36 questions to get matches.\n            </Typography>\n            <Button \n              variant=\"contained\" \n              color=\"primary\"\n              startIcon={<PersonIcon />}\n              sx={{ mt: 2 }}\n              onClick={() => navigate('/create-profile')}\n            >\n              Create Profile\n            </Button>\n          </Paper>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default MatchesScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}