{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Button, Paper, CircularProgress, Alert, Divider, Card, CardContent } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport AnalyticsIcon from '@mui/icons-material/Analytics';\n\n// Define the two personas for display purposes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst personalities = [{\n  name: \"Alex\",\n  color: \"#3f51b5\",\n  description: \"Thoughtful, philosophical, enjoys deep conversations\"\n}, {\n  name: \"Jordan\",\n  color: \"#f50057\",\n  description: \"Energetic, adventurous, loves sharing experiences\"\n}];\n\n// Simple conversation starters\nconst STARTERS = [\"What gives life meaning?\", \"Where would you travel if you could go anywhere?\", \"Is technology bringing people closer or pushing them apart?\", \"What's a book that changed your view of the world?\", \"What's something you've changed your mind about recently?\"];\n\n// Add a development mode flag\nconst DEV_MODE = true; // Set to false when backend is ready\n\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [exchangeCount, setExchangeCount] = useState(0);\n  // Add auto-advance feature\n  const [autoAdvance, setAutoAdvance] = useState(true);\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  // Backend API URL\n  const BACKEND_URL = \"http://localhost:8000\";\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Add a message to the UI\n  const addMessage = (speakerIndex, text) => {\n    const newMessage = {\n      id: Date.now(),\n      speaker: speakerIndex,\n      text: text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  };\n\n  // Get random starter\n  const getStarter = () => {\n    return STARTERS[Math.floor(Math.random() * STARTERS.length)];\n  };\n\n  // Start a new conversation using CrewAI backend\n  const startConversation = async () => {\n    setMessages([]);\n    setError(null);\n    setIsRunning(true);\n    setIsLoading(true);\n    setExchangeCount(0);\n    setAnalysisResult(null);\n\n    // Choose a random starter from Alex\n    const starter = getStarter();\n    console.log(\"Starting with:\", starter);\n\n    // Add the starter message from Alex\n    addMessage(0, starter);\n    if (DEV_MODE) {\n      // Development mode - use pre-written responses\n      console.log(\"Running in development mode with fallback responses\");\n\n      // Add loading indicator for Jordan\n      addMessage(1, \"...\");\n\n      // Simulate network delay\n      setTimeout(() => {\n        // Remove loading indicator\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n        // Add Jordan's fallback response based on the starter\n        const jordanResponses = {\n          \"What gives life meaning?\": \"Life is all about adventures and pushing boundaries! I find meaning in collecting amazing experiences - like when I went skydiving and felt completely alive. It's about creating stories worth telling!\",\n          \"Where would you travel if you could go anywhere?\": \"New Zealand, without a doubt! The opportunity to bungee jump, hike volcanoes, and kayak through those incredible landscapes would be the ultimate adventure!\",\n          \"Is technology bringing people closer or pushing them apart?\": \"Technology is amazing for bringing people together! I've made friends all over the world through social media, and we've actually met up during my travels. It's expanded my world!\",\n          \"What's a book that changed your view of the world?\": \"\\\"Into the Wild\\\" completely changed me! After reading it, I took my first solo hiking trip - it taught me about freedom and challenging social expectations in a way I'd never considered.\",\n          \"What's something you've changed your mind about recently?\": \"I used to think extreme sports were just about adrenaline, but after taking up rock climbing, I realized they're about mindfulness and being completely present in the moment!\"\n        };\n        const jordanResponse = jordanResponses[starter] || jordanResponses[\"What gives life meaning?\"];\n        addMessage(1, jordanResponse);\n\n        // Add loading indicator for Alex's response\n        setTimeout(() => {\n          // Add Alex's fallback response\n          const alexResponses = {\n            \"What gives life meaning?\": \"Your enthusiasm for active experiences is fascinating. I tend to find meaning in moments of deep connection and understanding. Perhaps meaning emerges from both action and reflection - the experiences we collect and how we integrate them into our understanding of ourselves.\",\n            \"Where would you travel if you could go anywhere?\": \"Your passion for adventure is compelling. I'd choose Kyoto, Japan, especially during autumn. The intersection of ancient temples, philosophical traditions, and natural beauty creates a setting for both reflection and cultural appreciation.\",\n            \"Is technology bringing people closer or pushing them apart?\": \"That's a positive perspective. I see it as more nuanced - technology connects us across distances but can sometimes create a sense of isolation. The quality of these connections depends on how mindfully we use these tools.\",\n            \"What's a book that changed your view of the world?\": \"That's fascinating how it inspired direct action. For me, Viktor Frankl's \\\"Man's Search for Meaning\\\" profoundly affected my understanding of human resilience and how we find purpose even in suffering.\",\n            \"What's something you've changed your mind about recently?\": \"That's a profound insight about mindfulness. Similarly, I've reconsidered my view on daily routines. I used to think spontaneity was essential for creativity, but I've found that thoughtful rituals create the mental space needed for deeper thinking.\"\n          };\n          const alexResponse = alexResponses[starter] || alexResponses[\"What gives life meaning?\"];\n          addMessage(0, alexResponse);\n          setExchangeCount(1);\n          setIsLoading(false);\n\n          // Auto-continue after a delay if auto-advance is enabled\n          if (autoAdvance) {\n            setTimeout(() => {\n              if (isRunning) {\n                continueConversation();\n              }\n            }, 2000); // 2 second delay before next exchange\n          }\n        }, 1500);\n      }, 1500);\n    } else {\n      try {\n        // Add loading indicators\n        addMessage(1, \"...\");\n        console.log(\"Connecting to backend at:\", BACKEND_URL);\n\n        // Call the backend with timeout handling\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\n\n        const response = await fetch(`${BACKEND_URL}/generate-conversation`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            starter: starter,\n            messages: []\n          }),\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Backend error (${response.status}): ${errorText}`);\n        }\n        const data = await response.json();\n        console.log(\"Backend response:\", data);\n\n        // Remove loading indicator\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n        // Add Jordan's response\n        addMessage(1, data.jordan_message);\n\n        // Add Alex's next response\n        addMessage(0, data.alex_message);\n\n        // Increment exchange count\n        setExchangeCount(1);\n\n        // Set up for continuing the conversation\n        setIsLoading(false);\n\n        // Auto-continue after a delay if auto-advance is enabled\n        if (autoAdvance) {\n          setTimeout(() => {\n            if (isRunning) {\n              continueConversation();\n            }\n          }, 2000); // 2 second delay before next exchange\n        }\n      } catch (err) {\n        console.error(\"Error starting conversation:\", err);\n\n        // Provide more helpful error message based on error type\n        if (err.name === 'AbortError') {\n          setError(\"Connection timeout - the backend server is taking too long to respond\");\n        } else if (err.message.includes(\"Failed to fetch\")) {\n          setError(\"Could not connect to the backend server. Please ensure the Python server is running at \" + BACKEND_URL);\n        } else {\n          setError(`Error: ${err.message}`);\n        }\n\n        // Remove loading indicator\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n        // Add fallback responses if backend fails\n        addMessage(1, \"That's a fascinating question! I went hiking in Nepal last year and spent a lot of time thinking about this exact topic. I found that what gives my life meaning is the collection of experiences and connections I make along the way.\");\n        setIsLoading(false);\n        setIsRunning(false);\n\n        // Auto-continue after a delay if auto-advance is enabled\n        if (autoAdvance) {\n          setTimeout(() => {\n            if (isRunning) {\n              continueConversation();\n            }\n          }, 2000);\n        }\n      }\n    }\n  };\n\n  // Continue the conversation\n  const continueConversation = async () => {\n    if (!isRunning || isLoading) return;\n    setIsLoading(true);\n    try {\n      // Add loading indicators for the next exchange\n      addMessage(1, \"...\");\n\n      // Format messages for the backend\n      const formattedMessages = messages.map(msg => ({\n        speaker: personalities[msg.speaker].name,\n        text: msg.text\n      }));\n\n      // Call the backend to continue the conversation\n      const response = await fetch(`${BACKEND_URL}/generate-conversation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          starter: messages[0].text,\n          // Original starter\n          messages: formattedMessages\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Backend error (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"Backend response:\", data);\n\n      // Remove loading indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Add Jordan's response\n      addMessage(1, data.jordan_message);\n\n      // Add Alex's next response\n      addMessage(0, data.alex_message);\n\n      // Increment exchange count\n      setExchangeCount(prev => prev + 1);\n      setIsLoading(false);\n\n      // Auto-continue after a delay if auto-advance is enabled\n      if (autoAdvance) {\n        setTimeout(() => {\n          if (isRunning) {\n            continueConversation();\n          }\n        }, 2000); // 2 second delay before next exchange\n      }\n    } catch (err) {\n      console.error(\"Error continuing conversation:\", err);\n      setError(`Error: ${err.message}`);\n\n      // Remove loading indicator\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\n\n      // Add fallback responses if backend fails\n      const jordanFallbacks = [\"That's amazing! I had a similar experience while traveling through Southeast Asia. The perspective you gain from immersing yourself in different cultures is invaluable.\", \"I totally get what you mean! Life is all about these moments of discovery and connection. Last month I tried rock climbing for the first time, and it was such a powerful metaphor for overcoming challenges.\", \"Yes! That reminds me of this incredible sunset I witnessed on a hike in New Zealand. Sometimes the most profound insights come when we're pushing our boundaries in nature.\"];\n      const alexFallbacks = [\"That's an interesting perspective. I've been reading about how our experiences shape our worldview in several philosophical texts. The interplay between action and reflection seems crucial to developing wisdom.\", \"I appreciate your enthusiasm for direct experience. There's something to be said for balancing that with contemplative practices. I find that journaling helps me process and find deeper meaning in everyday interactions.\", \"The connection between physical experience and mental insight is fascinating. Philosophers like Merleau-Ponty wrote extensively about embodied cognition - how our physical experiences shape our understanding of the world.\"];\n      addMessage(1, jordanFallbacks[Math.floor(Math.random() * jordanFallbacks.length)]);\n      addMessage(0, alexFallbacks[Math.floor(Math.random() * alexFallbacks.length)]);\n      setExchangeCount(prev => prev + 1);\n      setIsLoading(false);\n\n      // Auto-continue after a delay if auto-advance is enabled\n      if (autoAdvance) {\n        setTimeout(() => {\n          if (isRunning) {\n            continueConversation();\n          }\n        }, 2000);\n      }\n    }\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsRunning(false);\n  };\n\n  // Add a toggle for auto-advance\n  const toggleAutoAdvance = () => {\n    setAutoAdvance(prev => !prev);\n  };\n\n  // New function to analyze the conversation\n  const analyzeConversation = async () => {\n    if (messages.length < 4) {\n      setError(\"Need more conversation before analysis can be performed\");\n      return;\n    }\n    setIsAnalyzing(true);\n    try {\n      if (DEV_MODE) {\n        // Simulate API call in dev mode\n        setTimeout(() => {\n          const sampleAnalysis = {\n            chemistry: \"Alex and Jordan show good conversational chemistry with a complementary dynamic. Alex brings thoughtful reflection while Jordan adds energy and real-world experiences.\",\n            connectionPoints: [\"Both value personal growth through different approaches\", \"Shared interest in meaningful experiences\", \"Complementary perspectives that could lead to balanced discussions\", \"Both appear to listen and respond thoughtfully to each other\"],\n            potentialIssues: [\"Different approaches to finding meaning (reflection vs. action)\", \"Jordan's high-energy approach might sometimes overwhelm Alex's contemplative nature\", \"Alex might want deeper philosophical discussions than Jordan is comfortable with\"],\n            overallAssessment: \"This pairing shows promising compatibility with an interesting balance of thoughtfulness and adventure. Their different approaches to life could either complement each other well or become points of friction depending on how flexible both parties are.\"\n          };\n          setAnalysisResult(sampleAnalysis);\n          setIsAnalyzing(false);\n        }, 1500);\n      } else {\n        // Format messages for the backend\n        const formattedMessages = messages.map(msg => ({\n          speaker: personalities[msg.speaker].name,\n          text: msg.text\n        }));\n\n        // Call the backend to analyze\n        const response = await fetch(`${BACKEND_URL}/analyze-conversation`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messages: formattedMessages\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Backend error (${response.status})`);\n        }\n        const data = await response.json();\n        setAnalysisResult(data);\n        setIsAnalyzing(false);\n      }\n    } catch (err) {\n      console.error(\"Error analyzing conversation:\", err);\n      setError(`Analysis error: ${err.message}`);\n      setIsAnalyzing(false);\n\n      // Fallback analysis if API fails\n      setAnalysisResult({\n        chemistry: \"Based on the limited conversation, Alex and Jordan appear to have complementary communication styles that could work well together.\",\n        connectionPoints: [\"Different perspectives that could lead to growth\", \"Both engage with each other's ideas respectfully\"],\n        potentialIssues: [\"Different energy levels and approaches to life\", \"May have different priorities in what they value\"],\n        overallAssessment: \"This match shows potential but would benefit from more conversation to truly assess compatibility.\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Conversation Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: 2,\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: startConversation,\n          disabled: isRunning && isLoading,\n          children: \"Start New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), isRunning && !isLoading && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          onClick: continueConversation,\n          children: \"Continue Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), isRunning && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: stopConversation,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: autoAdvance ? \"success\" : \"inherit\",\n          onClick: toggleAutoAdvance,\n          children: [\"Auto-Advance: \", autoAdvance ? \"ON\" : \"OFF\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), exchangeCount > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        textAlign: \"center\",\n        sx: {\n          mb: 2\n        },\n        children: [\"Conversation exchanges: \", exchangeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          height: '60vh',\n          p: 2,\n          mb: 2,\n          overflowY: 'auto',\n          bgcolor: '#f5f5f5'\n        },\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              maxWidth: '80%',\n              bgcolor: personalities[message.speaker].color,\n              color: 'white',\n              p: 2,\n              borderRadius: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              sx: {\n                opacity: 0.9,\n                mb: 0.5\n              },\n              children: personalities[message.speaker].name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 16,\n                color: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 21\n              }, this) : message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), messages.length > 0 && !analysisResult && !isAnalyzing && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"info\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(AnalyticsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 26\n          }, this),\n          onClick: analyzeConversation,\n          sx: {\n            py: 1.5,\n            px: 3,\n            fontWeight: 'bold',\n            boxShadow: 3,\n            fontSize: '1.1rem'\n          },\n          children: \"Analyze Dating Compatibility\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 11\n      }, this), isAnalyzing && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            ml: 2\n          },\n          children: \"Analyzing conversation...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this), analysisResult && /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          my: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            color: \"primary\",\n            children: \"Conversation Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            paragraph: true,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Chemistry:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 17\n            }, this), \" \", analysisResult.chemistry]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            color: \"success.main\",\n            children: \"Connection Points:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: analysisResult.connectionPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: point\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 21\n              }, this)\n            }, `connection-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            color: \"error.main\",\n            children: \"Potential Issues:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: analysisResult.potentialIssues.map((issue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: issue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 21\n              }, this)\n            }, `issue-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              my: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              fontWeight: 'bold',\n              mt: 2\n            },\n            children: \"Overall Assessment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            paragraph: true,\n            children: analysisResult.overallAssessment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'center',\n              mt: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              onClick: () => setAnalysisResult(null),\n              children: \"Hide Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: personalities.map((person, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: person.color\n          },\n          children: [person.name, \": \", messages.filter(m => m.speaker === index && m.text !== \"...\").length, \" messages\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"9Ql/Zl5XiQOMMjZCaixrjFLuVhs=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Button","Paper","CircularProgress","Alert","Divider","Card","CardContent","ArrowBackIcon","AnalyticsIcon","jsxDEV","_jsxDEV","personalities","name","color","description","STARTERS","DEV_MODE","AIChatSimulation","_s","navigate","messages","setMessages","isRunning","setIsRunning","isLoading","setIsLoading","error","setError","messagesEndRef","exchangeCount","setExchangeCount","autoAdvance","setAutoAdvance","analysisResult","setAnalysisResult","isAnalyzing","setIsAnalyzing","BACKEND_URL","_messagesEndRef$curre","current","scrollIntoView","behavior","addMessage","speakerIndex","text","newMessage","id","Date","now","speaker","prev","getStarter","Math","floor","random","length","startConversation","starter","console","log","setTimeout","filter","m","jordanResponses","jordanResponse","alexResponses","alexResponse","continueConversation","controller","AbortController","timeoutId","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorText","Error","status","data","json","jordan_message","alex_message","err","message","includes","formattedMessages","map","msg","jordanFallbacks","alexFallbacks","stopConversation","toggleAutoAdvance","analyzeConversation","sampleAnalysis","chemistry","connectionPoints","potentialIssues","overallAssessment","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","severity","display","justifyContent","gap","disabled","elevation","height","p","overflowY","bgcolor","flexDirection","alignItems","borderRadius","opacity","size","ref","my","px","fontWeight","boxShadow","fontSize","ml","paragraph","point","index","issue","mt","person","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  Divider,\r\n  Card,\r\n  CardContent\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport AnalyticsIcon from '@mui/icons-material/Analytics';\r\n\r\n// Define the two personas for display purposes\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    color: \"#3f51b5\",\r\n    description: \"Thoughtful, philosophical, enjoys deep conversations\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    color: \"#f50057\", \r\n    description: \"Energetic, adventurous, loves sharing experiences\"\r\n  }\r\n];\r\n\r\n// Simple conversation starters\r\nconst STARTERS = [\r\n  \"What gives life meaning?\",\r\n  \"Where would you travel if you could go anywhere?\",\r\n  \"Is technology bringing people closer or pushing them apart?\",\r\n  \"What's a book that changed your view of the world?\",\r\n  \"What's something you've changed your mind about recently?\"\r\n];\r\n\r\n// Add a development mode flag\r\nconst DEV_MODE = true; // Set to false when backend is ready\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [exchangeCount, setExchangeCount] = useState(0);\r\n  // Add auto-advance feature\r\n  const [autoAdvance, setAutoAdvance] = useState(true);\r\n  const [analysisResult, setAnalysisResult] = useState(null);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n\r\n  // Backend API URL\r\n  const BACKEND_URL = \"http://localhost:8000\";\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Add a message to the UI\r\n  const addMessage = (speakerIndex, text) => {\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      speaker: speakerIndex,\r\n      text: text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    return newMessage;\r\n  };\r\n\r\n  // Get random starter\r\n  const getStarter = () => {\r\n    return STARTERS[Math.floor(Math.random() * STARTERS.length)];\r\n  };\r\n\r\n  // Start a new conversation using CrewAI backend\r\n  const startConversation = async () => {\r\n    setMessages([]);\r\n    setError(null);\r\n    setIsRunning(true);\r\n    setIsLoading(true);\r\n    setExchangeCount(0);\r\n    setAnalysisResult(null);\r\n    \r\n    // Choose a random starter from Alex\r\n    const starter = getStarter();\r\n    console.log(\"Starting with:\", starter);\r\n    \r\n    // Add the starter message from Alex\r\n    addMessage(0, starter);\r\n    \r\n    if (DEV_MODE) {\r\n      // Development mode - use pre-written responses\r\n      console.log(\"Running in development mode with fallback responses\");\r\n      \r\n      // Add loading indicator for Jordan\r\n      addMessage(1, \"...\");\r\n      \r\n      // Simulate network delay\r\n      setTimeout(() => {\r\n        // Remove loading indicator\r\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n        \r\n        // Add Jordan's fallback response based on the starter\r\n        const jordanResponses = {\r\n          \"What gives life meaning?\": \"Life is all about adventures and pushing boundaries! I find meaning in collecting amazing experiences - like when I went skydiving and felt completely alive. It's about creating stories worth telling!\",\r\n          \"Where would you travel if you could go anywhere?\": \"New Zealand, without a doubt! The opportunity to bungee jump, hike volcanoes, and kayak through those incredible landscapes would be the ultimate adventure!\",\r\n          \"Is technology bringing people closer or pushing them apart?\": \"Technology is amazing for bringing people together! I've made friends all over the world through social media, and we've actually met up during my travels. It's expanded my world!\",\r\n          \"What's a book that changed your view of the world?\": \"\\\"Into the Wild\\\" completely changed me! After reading it, I took my first solo hiking trip - it taught me about freedom and challenging social expectations in a way I'd never considered.\",\r\n          \"What's something you've changed your mind about recently?\": \"I used to think extreme sports were just about adrenaline, but after taking up rock climbing, I realized they're about mindfulness and being completely present in the moment!\"\r\n        };\r\n        \r\n        const jordanResponse = jordanResponses[starter] || jordanResponses[\"What gives life meaning?\"];\r\n        addMessage(1, jordanResponse);\r\n        \r\n        // Add loading indicator for Alex's response\r\n        setTimeout(() => {\r\n          // Add Alex's fallback response\r\n          const alexResponses = {\r\n            \"What gives life meaning?\": \"Your enthusiasm for active experiences is fascinating. I tend to find meaning in moments of deep connection and understanding. Perhaps meaning emerges from both action and reflection - the experiences we collect and how we integrate them into our understanding of ourselves.\",\r\n            \"Where would you travel if you could go anywhere?\": \"Your passion for adventure is compelling. I'd choose Kyoto, Japan, especially during autumn. The intersection of ancient temples, philosophical traditions, and natural beauty creates a setting for both reflection and cultural appreciation.\",\r\n            \"Is technology bringing people closer or pushing them apart?\": \"That's a positive perspective. I see it as more nuanced - technology connects us across distances but can sometimes create a sense of isolation. The quality of these connections depends on how mindfully we use these tools.\",\r\n            \"What's a book that changed your view of the world?\": \"That's fascinating how it inspired direct action. For me, Viktor Frankl's \\\"Man's Search for Meaning\\\" profoundly affected my understanding of human resilience and how we find purpose even in suffering.\",\r\n            \"What's something you've changed your mind about recently?\": \"That's a profound insight about mindfulness. Similarly, I've reconsidered my view on daily routines. I used to think spontaneity was essential for creativity, but I've found that thoughtful rituals create the mental space needed for deeper thinking.\"\r\n          };\r\n          \r\n          const alexResponse = alexResponses[starter] || alexResponses[\"What gives life meaning?\"];\r\n          addMessage(0, alexResponse);\r\n          \r\n          setExchangeCount(1);\r\n          setIsLoading(false);\r\n          \r\n          // Auto-continue after a delay if auto-advance is enabled\r\n          if (autoAdvance) {\r\n            setTimeout(() => {\r\n              if (isRunning) {\r\n                continueConversation();\r\n              }\r\n            }, 2000); // 2 second delay before next exchange\r\n          }\r\n        }, 1500);\r\n      }, 1500);\r\n    } else {\r\n      try {\r\n        // Add loading indicators\r\n        addMessage(1, \"...\");\r\n        \r\n        console.log(\"Connecting to backend at:\", BACKEND_URL);\r\n        \r\n        // Call the backend with timeout handling\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\r\n        \r\n        const response = await fetch(`${BACKEND_URL}/generate-conversation`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            starter: starter,\r\n            messages: []\r\n          }),\r\n          signal: controller.signal\r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`Backend error (${response.status}): ${errorText}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"Backend response:\", data);\r\n        \r\n        // Remove loading indicator\r\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n        \r\n        // Add Jordan's response\r\n        addMessage(1, data.jordan_message);\r\n        \r\n        // Add Alex's next response\r\n        addMessage(0, data.alex_message);\r\n        \r\n        // Increment exchange count\r\n        setExchangeCount(1);\r\n        \r\n        // Set up for continuing the conversation\r\n        setIsLoading(false);\r\n        \r\n        // Auto-continue after a delay if auto-advance is enabled\r\n        if (autoAdvance) {\r\n          setTimeout(() => {\r\n            if (isRunning) {\r\n              continueConversation();\r\n            }\r\n          }, 2000); // 2 second delay before next exchange\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error(\"Error starting conversation:\", err);\r\n        \r\n        // Provide more helpful error message based on error type\r\n        if (err.name === 'AbortError') {\r\n          setError(\"Connection timeout - the backend server is taking too long to respond\");\r\n        } else if (err.message.includes(\"Failed to fetch\")) {\r\n          setError(\"Could not connect to the backend server. Please ensure the Python server is running at \" + BACKEND_URL);\r\n        } else {\r\n          setError(`Error: ${err.message}`);\r\n        }\r\n        \r\n        // Remove loading indicator\r\n        setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n        \r\n        // Add fallback responses if backend fails\r\n        addMessage(1, \"That's a fascinating question! I went hiking in Nepal last year and spent a lot of time thinking about this exact topic. I found that what gives my life meaning is the collection of experiences and connections I make along the way.\");\r\n        \r\n        setIsLoading(false);\r\n        setIsRunning(false);\r\n        \r\n        // Auto-continue after a delay if auto-advance is enabled\r\n        if (autoAdvance) {\r\n          setTimeout(() => {\r\n            if (isRunning) {\r\n              continueConversation();\r\n            }\r\n          }, 2000);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Continue the conversation\r\n  const continueConversation = async () => {\r\n    if (!isRunning || isLoading) return;\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Add loading indicators for the next exchange\r\n      addMessage(1, \"...\");\r\n      \r\n      // Format messages for the backend\r\n      const formattedMessages = messages.map(msg => ({\r\n        speaker: personalities[msg.speaker].name,\r\n        text: msg.text\r\n      }));\r\n      \r\n      // Call the backend to continue the conversation\r\n      const response = await fetch(`${BACKEND_URL}/generate-conversation`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          starter: messages[0].text, // Original starter\r\n          messages: formattedMessages\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Backend error (${response.status}): ${errorText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"Backend response:\", data);\r\n      \r\n      // Remove loading indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Add Jordan's response\r\n      addMessage(1, data.jordan_message);\r\n      \r\n      // Add Alex's next response\r\n      addMessage(0, data.alex_message);\r\n      \r\n      // Increment exchange count\r\n      setExchangeCount(prev => prev + 1);\r\n      \r\n      setIsLoading(false);\r\n      \r\n      // Auto-continue after a delay if auto-advance is enabled\r\n      if (autoAdvance) {\r\n        setTimeout(() => {\r\n          if (isRunning) {\r\n            continueConversation();\r\n          }\r\n        }, 2000); // 2 second delay before next exchange\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error continuing conversation:\", err);\r\n      setError(`Error: ${err.message}`);\r\n      \r\n      // Remove loading indicator\r\n      setMessages(prev => prev.filter(m => m.text !== \"...\"));\r\n      \r\n      // Add fallback responses if backend fails\r\n      const jordanFallbacks = [\r\n        \"That's amazing! I had a similar experience while traveling through Southeast Asia. The perspective you gain from immersing yourself in different cultures is invaluable.\",\r\n        \"I totally get what you mean! Life is all about these moments of discovery and connection. Last month I tried rock climbing for the first time, and it was such a powerful metaphor for overcoming challenges.\",\r\n        \"Yes! That reminds me of this incredible sunset I witnessed on a hike in New Zealand. Sometimes the most profound insights come when we're pushing our boundaries in nature.\"\r\n      ];\r\n      \r\n      const alexFallbacks = [\r\n        \"That's an interesting perspective. I've been reading about how our experiences shape our worldview in several philosophical texts. The interplay between action and reflection seems crucial to developing wisdom.\",\r\n        \"I appreciate your enthusiasm for direct experience. There's something to be said for balancing that with contemplative practices. I find that journaling helps me process and find deeper meaning in everyday interactions.\",\r\n        \"The connection between physical experience and mental insight is fascinating. Philosophers like Merleau-Ponty wrote extensively about embodied cognition - how our physical experiences shape our understanding of the world.\"\r\n      ];\r\n      \r\n      addMessage(1, jordanFallbacks[Math.floor(Math.random() * jordanFallbacks.length)]);\r\n      addMessage(0, alexFallbacks[Math.floor(Math.random() * alexFallbacks.length)]);\r\n      \r\n      setExchangeCount(prev => prev + 1);\r\n      setIsLoading(false);\r\n      \r\n      // Auto-continue after a delay if auto-advance is enabled\r\n      if (autoAdvance) {\r\n        setTimeout(() => {\r\n          if (isRunning) {\r\n            continueConversation();\r\n          }\r\n        }, 2000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  // Add a toggle for auto-advance\r\n  const toggleAutoAdvance = () => {\r\n    setAutoAdvance(prev => !prev);\r\n  };\r\n\r\n  // New function to analyze the conversation\r\n  const analyzeConversation = async () => {\r\n    if (messages.length < 4) {\r\n      setError(\"Need more conversation before analysis can be performed\");\r\n      return;\r\n    }\r\n    \r\n    setIsAnalyzing(true);\r\n    \r\n    try {\r\n      if (DEV_MODE) {\r\n        // Simulate API call in dev mode\r\n        setTimeout(() => {\r\n          const sampleAnalysis = {\r\n            chemistry: \"Alex and Jordan show good conversational chemistry with a complementary dynamic. Alex brings thoughtful reflection while Jordan adds energy and real-world experiences.\",\r\n            connectionPoints: [\r\n              \"Both value personal growth through different approaches\",\r\n              \"Shared interest in meaningful experiences\",\r\n              \"Complementary perspectives that could lead to balanced discussions\",\r\n              \"Both appear to listen and respond thoughtfully to each other\"\r\n            ],\r\n            potentialIssues: [\r\n              \"Different approaches to finding meaning (reflection vs. action)\",\r\n              \"Jordan's high-energy approach might sometimes overwhelm Alex's contemplative nature\",\r\n              \"Alex might want deeper philosophical discussions than Jordan is comfortable with\"\r\n            ],\r\n            overallAssessment: \"This pairing shows promising compatibility with an interesting balance of thoughtfulness and adventure. Their different approaches to life could either complement each other well or become points of friction depending on how flexible both parties are.\"\r\n          };\r\n          \r\n          setAnalysisResult(sampleAnalysis);\r\n          setIsAnalyzing(false);\r\n        }, 1500);\r\n      } else {\r\n        // Format messages for the backend\r\n        const formattedMessages = messages.map(msg => ({\r\n          speaker: personalities[msg.speaker].name,\r\n          text: msg.text\r\n        }));\r\n        \r\n        // Call the backend to analyze\r\n        const response = await fetch(`${BACKEND_URL}/analyze-conversation`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            messages: formattedMessages\r\n          })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`Backend error (${response.status})`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setAnalysisResult(data);\r\n        setIsAnalyzing(false);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error analyzing conversation:\", err);\r\n      setError(`Analysis error: ${err.message}`);\r\n      setIsAnalyzing(false);\r\n      \r\n      // Fallback analysis if API fails\r\n      setAnalysisResult({\r\n        chemistry: \"Based on the limited conversation, Alex and Jordan appear to have complementary communication styles that could work well together.\",\r\n        connectionPoints: [\r\n          \"Different perspectives that could lead to growth\",\r\n          \"Both engage with each other's ideas respectfully\"\r\n        ],\r\n        potentialIssues: [\r\n          \"Different energy levels and approaches to life\",\r\n          \"May have different priorities in what they value\"\r\n        ],\r\n        overallAssessment: \"This match shows potential but would benefit from more conversation to truly assess compatibility.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Conversation Simulation\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Controls */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 3 }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={startConversation}\r\n            disabled={isRunning && isLoading}\r\n          >\r\n            Start New Conversation\r\n          </Button>\r\n          \r\n          {isRunning && !isLoading && (\r\n            <Button \r\n              variant=\"outlined\" \r\n              color=\"secondary\"\r\n              onClick={continueConversation}\r\n            >\r\n              Continue Conversation\r\n            </Button>\r\n          )}\r\n          \r\n          {isRunning && (\r\n            <Button \r\n              variant=\"outlined\" \r\n              color=\"error\"\r\n              onClick={stopConversation}\r\n            >\r\n              Stop\r\n            </Button>\r\n          )}\r\n          \r\n          {/* Add auto-advance toggle */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            color={autoAdvance ? \"success\" : \"inherit\"}\r\n            onClick={toggleAutoAdvance}\r\n          >\r\n            Auto-Advance: {autoAdvance ? \"ON\" : \"OFF\"}\r\n          </Button>\r\n        </Box>\r\n        \r\n        {/* Exchange counter */}\r\n        {exchangeCount > 0 && (\r\n          <Typography variant=\"body2\" textAlign=\"center\" sx={{ mb: 2 }}>\r\n            Conversation exchanges: {exchangeCount}\r\n          </Typography>\r\n        )}\r\n        \r\n        {/* Chat display */}\r\n        <Paper \r\n          elevation={3} \r\n          sx={{ \r\n            height: '60vh', \r\n            p: 2, \r\n            mb: 2, \r\n            overflowY: 'auto',\r\n            bgcolor: '#f5f5f5' \r\n          }}\r\n        >\r\n          {messages.map((message) => (\r\n            <Box \r\n              key={message.id}\r\n              sx={{ \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                alignItems: message.speaker === 0 ? 'flex-start' : 'flex-end',\r\n                mb: 2\r\n              }}\r\n            >\r\n              <Box \r\n                sx={{ \r\n                  maxWidth: '80%', \r\n                  bgcolor: personalities[message.speaker].color,\r\n                  color: 'white',\r\n                  p: 2, \r\n                  borderRadius: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle2\" sx={{ opacity: 0.9, mb: 0.5 }}>\r\n                  {personalities[message.speaker].name}\r\n                </Typography>\r\n                \r\n                <Typography variant=\"body1\">\r\n                  {message.text === \"...\" ? (\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                  ) : message.text}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </Paper>\r\n        \r\n        {/* Analysis button - make it more prominent and appear after any messages */}\r\n        {messages.length > 0 && !analysisResult && !isAnalyzing && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"info\"\r\n              size=\"large\"\r\n              startIcon={<AnalyticsIcon />}\r\n              onClick={analyzeConversation}\r\n              sx={{ \r\n                py: 1.5, \r\n                px: 3, \r\n                fontWeight: 'bold',\r\n                boxShadow: 3,\r\n                fontSize: '1.1rem'\r\n              }}\r\n            >\r\n              Analyze Dating Compatibility\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Analysis results */}\r\n        {isAnalyzing && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>\r\n            <CircularProgress size={30} />\r\n            <Typography variant=\"body1\" sx={{ ml: 2 }}>\r\n              Analyzing conversation...\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        \r\n        {analysisResult && (\r\n          <Card sx={{ my: 2 }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom color=\"primary\">\r\n                Conversation Analysis\r\n              </Typography>\r\n              \r\n              <Typography variant=\"body1\" paragraph>\r\n                <strong>Chemistry:</strong> {analysisResult.chemistry}\r\n              </Typography>\r\n              \r\n              <Divider sx={{ my: 1 }} />\r\n              \r\n              <Typography variant=\"subtitle1\" gutterBottom color=\"success.main\">\r\n                Connection Points:\r\n              </Typography>\r\n              <ul>\r\n                {analysisResult.connectionPoints.map((point, index) => (\r\n                  <li key={`connection-${index}`}>\r\n                    <Typography variant=\"body2\">{point}</Typography>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              \r\n              <Divider sx={{ my: 1 }} />\r\n              \r\n              <Typography variant=\"subtitle1\" gutterBottom color=\"error.main\">\r\n                Potential Issues:\r\n              </Typography>\r\n              <ul>\r\n                {analysisResult.potentialIssues.map((issue, index) => (\r\n                  <li key={`issue-${index}`}>\r\n                    <Typography variant=\"body2\">{issue}</Typography>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              \r\n              <Divider sx={{ my: 1 }} />\r\n              \r\n              <Typography variant=\"body1\" sx={{ fontWeight: 'bold', mt: 2 }}>\r\n                Overall Assessment:\r\n              </Typography>\r\n              <Typography variant=\"body2\" paragraph>\r\n                {analysisResult.overallAssessment}\r\n              </Typography>\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  size=\"small\"\r\n                  onClick={() => setAnalysisResult(null)}\r\n                >\r\n                  Hide Analysis\r\n                </Button>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        \r\n        {/* Stats */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {personalities.map((person, index) => (\r\n            <Typography key={index} variant=\"body2\" sx={{ color: person.color }}>\r\n              {person.name}: {messages.filter(m => m.speaker === index && m.text !== \"...\").length} messages\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}