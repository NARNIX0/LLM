{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/api';\n\n// Define types\n\n// API functions\nexport const createProfile = async formData => {\n  const response = await axios.post(`${API_URL}/create-profile`, formData);\n  return response.data;\n};\nexport const saveQuestionAnswer = async data => {\n  const response = await axios.post(`${API_URL}/save-question-answer`, data);\n  return response.data;\n};\nexport const simulateConversation = async (user1Id, user2Id) => {\n  const response = await axios.post(`${API_URL}/simulate-conversation`, {\n    user1Id,\n    user2Id\n  });\n  return response.data;\n};\nexport const getMatches = async userId => {\n  const response = await axios.get(`${API_URL}/matches/${userId}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","createProfile","formData","response","post","data","saveQuestionAnswer","simulateConversation","user1Id","user2Id","getMatches","userId","get"],"sources":["C:/Users/omals/Documents/hacklondon 2025/dating-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3001/api';\n\n// Define types\nexport interface User {\n  id: number;\n  name: string;\n  age: number;\n  interests: string;\n  profilePicture?: string;\n}\n\nexport interface QuestionAnswer {\n  userId: number;\n  questionNumber: number;\n  answer: string;\n}\n\nexport interface Match {\n  id: number;\n  compatibilityScore: number;\n  matchUserId: number;\n  name: string;\n  age: number;\n  interests: string;\n  profilePicture?: string;\n  conversationTranscript: string;\n}\n\n// API functions\nexport const createProfile = async (\n  formData: FormData\n): Promise<{id: number; message: string}> => {\n  const response = await axios.post(`${API_URL}/create-profile`, formData);\n  return response.data;\n};\n\nexport const saveQuestionAnswer = async (\n  data: QuestionAnswer\n): Promise<{id: number; message: string}> => {\n  const response = await axios.post(`${API_URL}/save-question-answer`, data);\n  return response.data;\n};\n\nexport const simulateConversation = async (\n  user1Id: number,\n  user2Id: number\n): Promise<{matchId: number; compatibilityScore: number; transcript: string}> => {\n  const response = await axios.post(`${API_URL}/simulate-conversation`, {\n    user1Id,\n    user2Id\n  });\n  return response.data;\n};\n\nexport const getMatches = async (userId: number): Promise<{matches: Match[]}> => {\n  const response = await axios.get(`${API_URL}/matches/${userId}`);\n  return response.data;\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;;AA0BA;AACA,OAAO,MAAMC,aAAa,GAAG,MAC3BC,QAAkB,IACyB;EAC3C,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,iBAAiB,EAAEE,QAAQ,CAAC;EACxE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAChCD,IAAoB,IACuB;EAC3C,MAAMF,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,uBAAuB,EAAEK,IAAI,CAAC;EAC1E,OAAOF,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAClCC,OAAe,EACfC,OAAe,KACgE;EAC/E,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,wBAAwB,EAAE;IACpEQ,OAAO;IACPC;EACF,CAAC,CAAC;EACF,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAOC,MAAc,IAAkC;EAC/E,MAAMR,QAAQ,GAAG,MAAMJ,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,YAAYW,MAAM,EAAE,CAAC;EAChE,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}