{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Paper, Avatar, Button, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\n// Type declaration for TypeScript\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Define the personalities\nconst personalities = [{\n  id: 0,\n  name: \"Alex\",\n  avatar: \"A\",\n  color: \"#3f51b5\",\n  systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\n}, {\n  id: 1,\n  name: \"Jordan\",\n  avatar: \"J\",\n  color: \"#f50057\",\n  systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\n}];\n\n// Define a message type\n\n// Conversation starters\nconst conversationStarters = [\"What do you think gives life meaning?\", \"If you could travel anywhere, where would you go and why?\", \"What's something you've changed your mind about recently?\", \"Do you think technology is bringing people closer together or pushing them apart?\", \"What's a book or movie that changed how you see the world?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isActive, setIsActive] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [messageCount, setMessageCount] = useState({\n    0: 0,\n    1: 0\n  });\n  const [isComplete, setIsComplete] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Function to start the conversation\n  const startConversation = () => {\n    setIsActive(true);\n    setIsComplete(false);\n    setMessages([]);\n    setMessageCount({\n      0: 0,\n      1: 0\n    });\n\n    // Choose a random starter\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\n\n    // Initialize conversation history with system prompt\n    setConversationHistory([{\n      role: \"system\",\n      content: personalities[0].systemPrompt\n    }, {\n      role: \"user\",\n      content: starter\n    }]);\n\n    // Add first message from Alex (personality 0)\n    addMessage(0, starter);\n\n    // Schedule next message\n    scheduleNextMessage(0, starter);\n  };\n\n  // Add a new message\n  const addMessage = (sender, text) => {\n    const newMessage = {\n      id: Date.now(),\n      sender,\n      text\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setMessageCount(prev => ({\n      ...prev,\n      [sender]: prev[sender] + 1\n    }));\n    return newMessage;\n  };\n\n  // Add a typing indicator\n  const addTypingIndicator = sender => {\n    const indicator = {\n      id: Date.now(),\n      sender,\n      text: \"...\",\n      isTyping: true\n    };\n    setMessages(prev => [...prev, indicator]);\n    return indicator;\n  };\n\n  // Remove the typing indicator\n  const removeTypingIndicator = indicator => {\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\n  };\n\n  // Generate a response using fetch to call a language model API\n  const generateLLMResponse = async (personalityIndex, prompt) => {\n    try {\n      var _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      // Get the current personality's system prompt\n      const systemPrompt = personalities[personalityIndex].systemPrompt;\n\n      // Create a new conversation history for this request\n      const currentHistory = [{\n        role: \"system\",\n        content: systemPrompt\n      }, ...conversationHistory.filter(msg => msg.role !== \"system\")];\n\n      // Make the API call\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY || \"sk-...\"}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: currentHistory,\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to generate response\");\n      }\n      const data = await response.json();\n      const generatedText = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim();\n\n      // Update conversation history with the response\n      setConversationHistory(prev => [...prev, {\n        role: \"assistant\",\n        content: generatedText\n      }]);\n      return generatedText;\n    } catch (error) {\n      console.error(\"Error generating LLM response:\", error);\n\n      // Fallback responses\n      const fallbacks = personalityIndex === 0 ? [\"I find this topic fascinating. What are your thoughts on it?\", \"That's an interesting perspective. I've been reflecting on similar ideas lately.\", \"I'm drawn to the philosophical aspects of this question.\"] : [\"That sounds amazing! I'd love to try something like that someday.\", \"Life is all about experiences like that! What's next on your adventure list?\", \"I totally get what you mean! I had a similar experience when hiking last summer.\"];\n\n      // Add the fallback to conversation history\n      const fallback = fallbacks[Math.floor(Math.random() * fallbacks.length)];\n      setConversationHistory(prev => [...prev, {\n        role: \"assistant\",\n        content: fallback\n      }]);\n      return fallback;\n    }\n  };\n\n  // Schedule the next message\n  const scheduleNextMessage = async (lastSender, lastMessage) => {\n    // Determine next sender (alternate between 0 and 1)\n    const nextSender = lastSender === 0 ? 1 : 0;\n\n    // Check if we've reached the message limit\n    if (messageCount[nextSender] >= 10) {\n      setIsComplete(true);\n      setIsActive(false);\n      return;\n    }\n\n    // Show typing indicator after a short delay\n    setTimeout(async () => {\n      if (!isActive) return;\n      const indicator = addTypingIndicator(nextSender);\n      try {\n        // Update conversation history with the prompt (as user message)\n        setConversationHistory(prev => [...prev, {\n          role: \"user\",\n          content: lastMessage\n        }]);\n\n        // Generate a response\n        const response = await generateLLMResponse(nextSender, lastMessage);\n\n        // Stop if conversation was halted during API call\n        if (!isActive) return;\n\n        // Remove typing indicator\n        removeTypingIndicator(indicator);\n\n        // Add the message\n        addMessage(nextSender, response);\n\n        // Schedule the next message\n        setTimeout(() => {\n          scheduleNextMessage(nextSender, response);\n        }, 500);\n      } catch (err) {\n        console.error(\"Error in generation:\", err);\n        removeTypingIndicator(indicator);\n        setError(\"Failed to generate response\");\n        setIsActive(false);\n      }\n    }, 500);\n  };\n\n  // Stop the conversation\n  const stopConversation = () => {\n    setIsActive(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Match Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        paragraph: true,\n        textAlign: \"center\",\n        children: \"Watch as AI personalities have a conversation that simulates our matching system. Each message is generated by a language model taking on a distinct personality.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), messages.length === 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 26\n          }, this),\n          onClick: startConversation,\n          sx: {\n            py: 2,\n            px: 4\n          },\n          children: \"Start AI Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            mt: 4\n          },\n          children: personalities.map(personality => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                bgcolor: personality.color,\n                mr: 1\n              },\n              children: personality.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: personality.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 19\n            }, this)]\n          }, personality.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '60vh',\n            overflowY: 'auto',\n            p: 2,\n            backgroundColor: '#f5f5f5'\n          },\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                maxWidth: '70%',\n                bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\n                color: 'white',\n                p: 2,\n                borderRadius: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.isTyping ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 16,\n                  color: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    sx: {\n                      display: 'block',\n                      opacity: 0.8,\n                      mb: 0.5\n                    },\n                    children: personalities[message.sender].name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 27\n                  }, this), message.text]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[0].name, \": \", messageCount[0], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this), isActive && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: stopConversation,\n            children: \"Stop Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[1].name, \": \", messageCount[1], \"/10 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this), isComplete && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Conversation Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => navigate('/create-profile'),\n              sx: {\n                mx: 1\n              },\n              children: \"Create Your Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"secondary\",\n              onClick: startConversation,\n              sx: {\n                mx: 1\n              },\n              children: \"Start New Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"fs1szOJZohDAtxJ39QEWkXhq2is=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Container","Typography","Box","Paper","Avatar","Button","CircularProgress","Alert","ArrowBackIcon","PlayArrowIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","personalities","id","name","avatar","color","systemPrompt","conversationStarters","AIChatSimulation","_s","navigate","messages","setMessages","isActive","setIsActive","error","setError","messagesEndRef","messageCount","setMessageCount","isComplete","setIsComplete","conversationHistory","setConversationHistory","_messagesEndRef$curre","current","scrollIntoView","behavior","startConversation","starter","Math","floor","random","length","role","content","addMessage","scheduleNextMessage","sender","text","newMessage","Date","now","prev","addTypingIndicator","indicator","isTyping","removeTypingIndicator","filter","m","generateLLMResponse","personalityIndex","prompt","_data$choices$","_data$choices$$messag","_data$choices$$messag2","currentHistory","msg","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","max_tokens","temperature","ok","_errorData$error","errorData","json","Error","message","data","generatedText","choices","trim","console","fallbacks","fallback","lastSender","lastMessage","nextSender","setTimeout","err","stopConversation","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","paragraph","severity","display","justifyContent","my","size","px","mt","map","personality","alignItems","bgcolor","mr","elevation","height","overflowY","p","backgroundColor","borderRadius","opacity","ref","mx","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\n// Type declaration for TypeScript\r\ndeclare const process: any;\r\n\r\n// Define the personalities\r\nconst personalities = [\r\n  {\r\n    id: 0,\r\n    name: \"Alex\",\r\n    avatar: \"A\",\r\n    color: \"#3f51b5\",\r\n    systemPrompt: \"You are Alex, a thoughtful, introspective person who enjoys philosophical discussions, art, and literature. You express yourself in a warm, articulate manner and occasionally reference books or ideas that have influenced you. Keep your responses under 80 words and be genuinely curious about others' perspectives.\"\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Jordan\",\r\n    avatar: \"J\",\r\n    color: \"#f50057\",\r\n    systemPrompt: \"You are Jordan, an energetic, adventurous person who loves outdoor activities, travel, and trying new experiences. You're enthusiastic and have a good sense of humor. You speak in a lively way and often share stories about your adventures. Keep your responses under 80 words and maintain an optimistic outlook.\"\r\n  }\r\n];\r\n\r\n// Define a message type\r\ninterface Message {\r\n  id: number;\r\n  sender: number; // 0 for Alex, 1 for Jordan\r\n  text: string;\r\n  isTyping?: boolean;\r\n}\r\n\r\n// Conversation starters\r\nconst conversationStarters = [\r\n  \"What do you think gives life meaning?\",\r\n  \"If you could travel anywhere, where would you go and why?\",\r\n  \"What's something you've changed your mind about recently?\",\r\n  \"Do you think technology is bringing people closer together or pushing them apart?\",\r\n  \"What's a book or movie that changed how you see the world?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [messageCount, setMessageCount] = useState({ 0: 0, 1: 0 });\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [conversationHistory, setConversationHistory] = useState<Array<{role: string, content: string}>>([]);\r\n  \r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  // Function to start the conversation\r\n  const startConversation = () => {\r\n    setIsActive(true);\r\n    setIsComplete(false);\r\n    setMessages([]);\r\n    setMessageCount({ 0: 0, 1: 0 });\r\n    \r\n    // Choose a random starter\r\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\r\n    \r\n    // Initialize conversation history with system prompt\r\n    setConversationHistory([\r\n      { role: \"system\", content: personalities[0].systemPrompt },\r\n      { role: \"user\", content: starter }\r\n    ]);\r\n    \r\n    // Add first message from Alex (personality 0)\r\n    addMessage(0, starter);\r\n    \r\n    // Schedule next message\r\n    scheduleNextMessage(0, starter);\r\n  };\r\n  \r\n  // Add a new message\r\n  const addMessage = (sender: number, text: string) => {\r\n    const newMessage: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    setMessageCount(prev => ({ ...prev, [sender]: prev[sender] + 1 }));\r\n    \r\n    return newMessage;\r\n  };\r\n  \r\n  // Add a typing indicator\r\n  const addTypingIndicator = (sender: number) => {\r\n    const indicator: Message = {\r\n      id: Date.now(),\r\n      sender,\r\n      text: \"...\",\r\n      isTyping: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, indicator]);\r\n    return indicator;\r\n  };\r\n  \r\n  // Remove the typing indicator\r\n  const removeTypingIndicator = (indicator: Message) => {\r\n    setMessages(prev => prev.filter(m => m.id !== indicator.id));\r\n  };\r\n  \r\n  // Generate a response using fetch to call a language model API\r\n  const generateLLMResponse = async (personalityIndex: number, prompt: string) => {\r\n    try {\r\n      // Get the current personality's system prompt\r\n      const systemPrompt = personalities[personalityIndex].systemPrompt;\r\n      \r\n      // Create a new conversation history for this request\r\n      const currentHistory = [\r\n        { role: \"system\", content: systemPrompt },\r\n        ...conversationHistory.filter(msg => msg.role !== \"system\")\r\n      ];\r\n      \r\n      // Make the API call\r\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY || \"sk-...\"}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-3.5-turbo\",\r\n          messages: currentHistory,\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error?.message || \"Failed to generate response\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      const generatedText = data.choices[0]?.message?.content?.trim();\r\n      \r\n      // Update conversation history with the response\r\n      setConversationHistory(prev => [\r\n        ...prev,\r\n        { role: \"assistant\", content: generatedText }\r\n      ]);\r\n      \r\n      return generatedText;\r\n    } catch (error) {\r\n      console.error(\"Error generating LLM response:\", error);\r\n      \r\n      // Fallback responses\r\n      const fallbacks = personalityIndex === 0 ? [\r\n        \"I find this topic fascinating. What are your thoughts on it?\",\r\n        \"That's an interesting perspective. I've been reflecting on similar ideas lately.\",\r\n        \"I'm drawn to the philosophical aspects of this question.\"\r\n      ] : [\r\n        \"That sounds amazing! I'd love to try something like that someday.\",\r\n        \"Life is all about experiences like that! What's next on your adventure list?\",\r\n        \"I totally get what you mean! I had a similar experience when hiking last summer.\"\r\n      ];\r\n      \r\n      // Add the fallback to conversation history\r\n      const fallback = fallbacks[Math.floor(Math.random() * fallbacks.length)];\r\n      setConversationHistory(prev => [\r\n        ...prev,\r\n        { role: \"assistant\", content: fallback }\r\n      ]);\r\n      \r\n      return fallback;\r\n    }\r\n  };\r\n  \r\n  // Schedule the next message\r\n  const scheduleNextMessage = async (lastSender: number, lastMessage: string) => {\r\n    // Determine next sender (alternate between 0 and 1)\r\n    const nextSender = lastSender === 0 ? 1 : 0;\r\n    \r\n    // Check if we've reached the message limit\r\n    if (messageCount[nextSender] >= 10) {\r\n      setIsComplete(true);\r\n      setIsActive(false);\r\n      return;\r\n    }\r\n    \r\n    // Show typing indicator after a short delay\r\n    setTimeout(async () => {\r\n      if (!isActive) return;\r\n      \r\n      const indicator = addTypingIndicator(nextSender);\r\n      \r\n      try {\r\n        // Update conversation history with the prompt (as user message)\r\n        setConversationHistory(prev => [\r\n          ...prev,\r\n          { role: \"user\", content: lastMessage }\r\n        ]);\r\n        \r\n        // Generate a response\r\n        const response = await generateLLMResponse(nextSender, lastMessage);\r\n        \r\n        // Stop if conversation was halted during API call\r\n        if (!isActive) return;\r\n        \r\n        // Remove typing indicator\r\n        removeTypingIndicator(indicator);\r\n        \r\n        // Add the message\r\n        addMessage(nextSender, response);\r\n        \r\n        // Schedule the next message\r\n        setTimeout(() => {\r\n          scheduleNextMessage(nextSender, response);\r\n        }, 500);\r\n      } catch (err) {\r\n        console.error(\"Error in generation:\", err);\r\n        removeTypingIndicator(indicator);\r\n        setError(\"Failed to generate response\");\r\n        setIsActive(false);\r\n      }\r\n    }, 500);\r\n  };\r\n  \r\n  // Stop the conversation\r\n  const stopConversation = () => {\r\n    setIsActive(false);\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back to Home\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Match Simulation\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph textAlign=\"center\">\r\n          Watch as AI personalities have a conversation that simulates our matching system.\r\n          Each message is generated by a language model taking on a distinct personality.\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Start button */}\r\n        {messages.length === 0 && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={startConversation}\r\n              sx={{ py: 2, px: 4 }}\r\n            >\r\n              Start AI Conversation\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Chat container */}\r\n        {messages.length > 0 && (\r\n          <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, mt: 4 }}>\r\n              {personalities.map((personality) => (\r\n                <Box key={personality.id} sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <Avatar sx={{ bgcolor: personality.color, mr: 1 }}>\r\n                    {personality.avatar}\r\n                  </Avatar>\r\n                  <Typography variant=\"subtitle1\">\r\n                    {personality.name}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            \r\n            <Paper \r\n              elevation={3} \r\n              sx={{ \r\n                height: '60vh', \r\n                overflowY: 'auto',\r\n                p: 2,\r\n                backgroundColor: '#f5f5f5'\r\n              }}\r\n            >\r\n              {messages.map((message) => (\r\n                <Box \r\n                  key={message.id}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      maxWidth: '70%',\r\n                      bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\r\n                      color: 'white',\r\n                      p: 2,\r\n                      borderRadius: 2\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {message.isTyping ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : (\r\n                        <>\r\n                          <Typography variant=\"caption\" sx={{ display: 'block', opacity: 0.8, mb: 0.5 }}>\r\n                            {personalities[message.sender].name}\r\n                          </Typography>\r\n                          {message.text}\r\n                        </>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </Paper>\r\n            \r\n            {/* Counter and controls */}\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                {personalities[0].name}: {messageCount[0]}/10 messages\r\n              </Typography>\r\n              \r\n              {isActive && (\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\"\r\n                  onClick={stopConversation}\r\n                >\r\n                  Stop Conversation\r\n                </Button>\r\n              )}\r\n              \r\n              <Typography variant=\"body2\">\r\n                {personalities[1].name}: {messageCount[1]}/10 messages\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {/* Conversation complete message */}\r\n            {isComplete && (\r\n              <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Conversation Complete!\r\n                </Typography>\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => navigate('/create-profile')}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Create Your Profile\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"secondary\"\r\n                    onClick={startConversation}\r\n                    sx={{ mx: 1 }}\r\n                  >\r\n                    Start New Conversation\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}