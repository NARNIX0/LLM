{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omals\\\\Documents\\\\GitHub\\\\LLM\\\\HackLondon Final submission\\\\dating-app\\\\src\\\\pages\\\\AIChatSimulation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Paper, Avatar, Button, CircularProgress, Alert } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport Groq from 'groq-sdk';\n\n// Type declaration for TypeScript\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Mock Groq client for development\nconst groq = new Groq({\n  apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\n  dangerouslyAllowBrowser: true\n});\n\n// Define personality types\nconst personalities = [{\n  name: \"Alex\",\n  avatar: \"A\",\n  color: \"#3f51b5\",\n  systemPrompt: \"You are Alex, a thoughtful and creative person who loves art, literature, and philosophical discussions. You are introspective, kind, and curious about the world. You enjoy deep conversations and asking thought-provoking questions. You speak in a warm, articulate manner and occasionally reference books or art you enjoy. Keep your responses under 100 words.\"\n}, {\n  name: \"Jordan\",\n  avatar: \"J\",\n  color: \"#f50057\",\n  systemPrompt: \"You are Jordan, an energetic and adventurous person who loves outdoor activities, travel, and trying new experiences. You're outgoing, enthusiastic, and have a good sense of humor. You speak in a lively, expressive way and often share stories of your adventures or things you'd like to try. You're optimistic and encouraging of others. Keep your responses under 100 words.\"\n}];\n\n// Sample conversation starters\nconst conversationStarters = [\"What do you think gives life meaning?\", \"If you could travel anywhere, where would you go and why?\", \"What's something you've changed your mind about recently?\", \"Do you think technology is bringing people closer together or pushing them apart?\", \"What's a book or movie that changed how you see the world?\"];\nconst AIChatSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [conversationStarted, setConversationStarted] = useState(false);\n  const [messageCount, setMessageCount] = useState({\n    0: 0,\n    1: 0\n  });\n  const [error, setError] = useState(null);\n  const [isApiReady, setIsApiReady] = useState(true);\n  const messagesEndRef = useRef(null);\n\n  // Function to generate a response using Groq API\n  const generateResponse = async (personalityIndex, context) => {\n    const personality = personalities[personalityIndex];\n    try {\n      var _completion$choices$, _completion$choices$$;\n      // Format the conversation history for context\n      const conversationHistory = context.map((msg, i) => {\n        const role = i % 2 === 0 ? personalityIndex === 0 ? personalities[1].name : personalities[0].name : personality.name;\n        return `${role}: ${msg}`;\n      }).join('\\n');\n\n      // Make the API call to Groq\n      const completion = await groq.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: personality.systemPrompt\n        }, {\n          role: \"user\",\n          content: `You are having a conversation with ${personalityIndex === 0 ? personalities[1].name : personalities[0].name}. Here is the conversation so far:\\n\\n${conversationHistory}\\n\\nRespond to the last message as ${personality.name}. Keep your response under 80 words and stay in character.`\n        }],\n        model: \"llama-3-8b-8192\",\n        temperature: 0.7,\n        max_tokens: 200,\n        top_p: 1\n      });\n\n      // Extract and validate response\n      const responseText = (_completion$choices$ = completion.choices[0]) === null || _completion$choices$ === void 0 ? void 0 : (_completion$choices$$ = _completion$choices$.message) === null || _completion$choices$$ === void 0 ? void 0 : _completion$choices$$.content;\n      if (!responseText || responseText.trim() === '') {\n        throw new Error(\"Empty response received\");\n      }\n      return responseText;\n    } catch (err) {\n      console.error(\"Error generating response:\", err);\n\n      // More robust fallback based on personality\n      const fallbacks = personalityIndex === 0 ? [\"I find this conversation fascinating. The way we connect through ideas is what gives meaning to our interactions.\", \"That's an intriguing perspective. It reminds me of something I read recently about human connection.\", \"I've been reflecting on what you said. There's a deeper truth there that resonates with me.\"] : [\"That's awesome! I had a similar experience when I was hiking in the mountains last summer.\", \"I totally get what you mean! Life is all about seizing opportunities and making memories.\", \"That's such an interesting take! I'm always looking for new adventures that challenge my perspective.\"];\n      return fallbacks[Math.floor(Math.random() * fallbacks.length)];\n    }\n  };\n\n  // Scroll to bottom of message container\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Verify API key is present\n  useEffect(() => {\n    if (!process.env.REACT_APP_GROQ_API_KEY) {\n      setIsApiReady(false);\n      setError(\"Groq API key not found. Using pre-written responses instead.\");\n    }\n  }, []);\n\n  // Add this after checking if API key exists\n  useEffect(() => {\n    // Log API status without revealing the key\n    console.log(\"API Key present:\", !!process.env.REACT_APP_GROQ_API_KEY);\n\n    // Try to verify API access at component mount\n    const verifyApiAccess = async () => {\n      try {\n        // Test API with a simple prompt\n        await groq.chat.completions.create({\n          messages: [{\n            role: \"user\",\n            content: \"Hello\"\n          }],\n          model: \"llama-3-8b-8192\",\n          max_tokens: 10\n        });\n        setIsApiReady(true);\n      } catch (err) {\n        console.error(\"Failed to connect to Groq API:\", err);\n        setIsApiReady(false);\n        setError(\"Could not connect to Groq API. Please check your API key.\");\n      }\n    };\n    if (process.env.REACT_APP_GROQ_API_KEY) {\n      verifyApiAccess();\n    }\n  }, []);\n\n  // Start the conversation\n  const startConversation = () => {\n    console.log(\"Starting conversation...\");\n    setIsSimulating(true);\n    setConversationStarted(true);\n    setMessages([]);\n    setMessageCount({\n      0: 0,\n      1: 0\n    });\n    setError(null);\n\n    // Start with a random conversation opener from personality 0\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\n    console.log(\"Initial message:\", starter);\n\n    // Directly add the first message - this was working before\n    setMessages([{\n      sender: 0,\n      text: starter\n    }]);\n    setMessageCount(prev => ({\n      ...prev,\n      0: 1\n    }));\n\n    // Continue the conversation after a delay\n    setTimeout(() => {\n      console.log(\"Calling continueConversation with sender 0\");\n      continueConversation(0);\n    }, 1000);\n  };\n\n  // Function to continue the conversation\n  const continueConversation = async lastSender => {\n    console.log(\"Continuing conversation, last sender:\", lastSender);\n    if (!isSimulating) {\n      console.log(\"Not simulating, returning\");\n      return;\n    }\n\n    // Determine next sender\n    const nextSender = lastSender === 0 ? 1 : 0;\n\n    // Check if we've reached message limit\n    if (messageCount[0] >= 25 || messageCount[1] >= 25) {\n      setIsSimulating(false);\n      return;\n    }\n\n    // Get conversation context (last 5 messages)\n    const context = messages.slice(-5).map(m => m.text);\n    try {\n      // Show typing indicator\n      setMessages(prev => [...prev, {\n        sender: nextSender,\n        text: \"...\"\n      }]);\n\n      // Generate response using Groq API\n      const response = await generateResponse(nextSender, context);\n\n      // Replace typing indicator with actual response\n      setMessages(prev => [...prev.slice(0, -1), {\n        sender: nextSender,\n        text: response\n      }]);\n      setMessageCount(prev => ({\n        ...prev,\n        [nextSender]: prev[nextSender] + 1\n      }));\n\n      // Continue conversation after a delay\n      setTimeout(() => {\n        console.log(\"Calling continueConversation with sender\", nextSender);\n        continueConversation(nextSender);\n      }, 1000);\n    } catch (err) {\n      console.error(\"Error in conversation flow:\", err);\n      setError(\"There was an error in the conversation. Please try again.\");\n      setIsSimulating(false);\n    }\n  };\n\n  // Make sure we're catching and displaying all errors\n  useEffect(() => {\n    // Add a global error handler\n    const handleError = error => {\n      console.error(\"Global error:\", error);\n      setError(\"An error occurred: \" + error.message);\n      setIsSimulating(false);\n    };\n    window.addEventListener('error', handleError);\n    return () => window.removeEventListener('error', handleError);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/'),\n        sx: {\n          mb: 3\n        },\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        textAlign: \"center\",\n        children: \"AI Match Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        paragraph: true,\n        textAlign: \"center\",\n        children: \"Watch as two AI personalities have a conversation to see how our matching system works. Each AI has a distinct personality and communication style.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), !conversationStarted && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 26\n          }, this),\n          onClick: startConversation,\n          disabled: !isApiReady,\n          sx: {\n            py: 2,\n            px: 4\n          },\n          children: \"Start AI Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), conversationStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            mt: 4\n          },\n          children: personalities.map((personality, index) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                bgcolor: personality.color,\n                mr: 1\n              },\n              children: personality.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: personality.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '60vh',\n            overflowY: 'auto',\n            p: 2,\n            backgroundColor: '#f5f5f5'\n          },\n          children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                maxWidth: '70%',\n                bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\n                color: 'white',\n                p: 2,\n                borderRadius: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.text === \"...\" ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 16,\n                  color: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    sx: {\n                      display: 'block',\n                      opacity: 0.8,\n                      mb: 0.5\n                    },\n                    children: personalities[message.sender].name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 27\n                  }, this), message.text]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[0].name, \": \", messageCount[0], \"/25 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [personalities[1].name, \": \", messageCount[1], \"/25 messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), !isSimulating && conversationStarted && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Conversation Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => navigate('/create-profile'),\n            sx: {\n              mt: 2,\n              mr: 2\n            },\n            children: \"Create Your Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: startConversation,\n            sx: {\n              mt: 2\n            },\n            children: \"Start New Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(AIChatSimulation, \"C1FQgjYjHCmZDiPDctlcukqj6sc=\", false, function () {\n  return [useNavigate];\n});\n_c = AIChatSimulation;\nexport default AIChatSimulation;\nvar _c;\n$RefreshReg$(_c, \"AIChatSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Container","Typography","Box","Paper","Avatar","Button","CircularProgress","Alert","ArrowBackIcon","PlayArrowIcon","Groq","jsxDEV","_jsxDEV","Fragment","_Fragment","groq","apiKey","process","env","REACT_APP_GROQ_API_KEY","dangerouslyAllowBrowser","personalities","name","avatar","color","systemPrompt","conversationStarters","AIChatSimulation","_s","navigate","messages","setMessages","isSimulating","setIsSimulating","conversationStarted","setConversationStarted","messageCount","setMessageCount","error","setError","isApiReady","setIsApiReady","messagesEndRef","generateResponse","personalityIndex","context","personality","_completion$choices$","_completion$choices$$","conversationHistory","map","msg","i","role","join","completion","chat","completions","create","content","model","temperature","max_tokens","top_p","responseText","choices","message","trim","Error","err","console","fallbacks","Math","floor","random","length","_messagesEndRef$curre","current","scrollIntoView","behavior","log","verifyApiAccess","startConversation","starter","sender","text","prev","setTimeout","continueConversation","lastSender","nextSender","slice","m","response","handleError","window","addEventListener","removeEventListener","maxWidth","children","sx","py","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mb","variant","gutterBottom","textAlign","paragraph","severity","display","justifyContent","my","size","disabled","px","mt","index","alignItems","bgcolor","mr","elevation","height","overflowY","p","backgroundColor","borderRadius","opacity","ref","_c","$RefreshReg$"],"sources":["C:/Users/omals/Documents/GitHub/LLM/HackLondon Final submission/dating-app/src/pages/AIChatSimulation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport Groq from 'groq-sdk';\r\n\r\n// Type declaration for TypeScript\r\ndeclare const process: any;\r\n\r\n// Mock Groq client for development\r\nconst groq = new Groq({\r\n  apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\r\n  dangerouslyAllowBrowser: true\r\n});\r\n\r\n// Define personality types\r\nconst personalities = [\r\n  {\r\n    name: \"Alex\",\r\n    avatar: \"A\",\r\n    color: \"#3f51b5\",\r\n    systemPrompt: \"You are Alex, a thoughtful and creative person who loves art, literature, and philosophical discussions. You are introspective, kind, and curious about the world. You enjoy deep conversations and asking thought-provoking questions. You speak in a warm, articulate manner and occasionally reference books or art you enjoy. Keep your responses under 100 words.\"\r\n  },\r\n  {\r\n    name: \"Jordan\",\r\n    avatar: \"J\",\r\n    color: \"#f50057\",\r\n    systemPrompt: \"You are Jordan, an energetic and adventurous person who loves outdoor activities, travel, and trying new experiences. You're outgoing, enthusiastic, and have a good sense of humor. You speak in a lively, expressive way and often share stories of your adventures or things you'd like to try. You're optimistic and encouraging of others. Keep your responses under 100 words.\"\r\n  }\r\n];\r\n\r\n// Sample conversation starters\r\nconst conversationStarters = [\r\n  \"What do you think gives life meaning?\",\r\n  \"If you could travel anywhere, where would you go and why?\",\r\n  \"What's something you've changed your mind about recently?\",\r\n  \"Do you think technology is bringing people closer together or pushing them apart?\",\r\n  \"What's a book or movie that changed how you see the world?\"\r\n];\r\n\r\nconst AIChatSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState<{sender: number, text: string}[]>([]);\r\n  const [isSimulating, setIsSimulating] = useState(false);\r\n  const [conversationStarted, setConversationStarted] = useState(false);\r\n  const [messageCount, setMessageCount] = useState({ 0: 0, 1: 0 });\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isApiReady, setIsApiReady] = useState(true);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Function to generate a response using Groq API\r\n  const generateResponse = async (personalityIndex: number, context: string[]) => {\r\n    const personality = personalities[personalityIndex];\r\n    try {\r\n      // Format the conversation history for context\r\n      const conversationHistory = context.map((msg, i) => {\r\n        const role = i % 2 === 0 ? \r\n          (personalityIndex === 0 ? personalities[1].name : personalities[0].name) : \r\n          personality.name;\r\n        return `${role}: ${msg}`;\r\n      }).join('\\n');\r\n      \r\n      // Make the API call to Groq\r\n      const completion = await groq.chat.completions.create({\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: personality.systemPrompt\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: `You are having a conversation with ${personalityIndex === 0 ? personalities[1].name : personalities[0].name}. Here is the conversation so far:\\n\\n${conversationHistory}\\n\\nRespond to the last message as ${personality.name}. Keep your response under 80 words and stay in character.`\r\n          }\r\n        ],\r\n        model: \"llama-3-8b-8192\",\r\n        temperature: 0.7,\r\n        max_tokens: 200,\r\n        top_p: 1,\r\n      });\r\n      \r\n      // Extract and validate response\r\n      const responseText = completion.choices[0]?.message?.content;\r\n      if (!responseText || responseText.trim() === '') {\r\n        throw new Error(\"Empty response received\");\r\n      }\r\n      \r\n      return responseText;\r\n    } catch (err) {\r\n      console.error(\"Error generating response:\", err);\r\n      \r\n      // More robust fallback based on personality\r\n      const fallbacks = personalityIndex === 0 ? [\r\n        \"I find this conversation fascinating. The way we connect through ideas is what gives meaning to our interactions.\",\r\n        \"That's an intriguing perspective. It reminds me of something I read recently about human connection.\",\r\n        \"I've been reflecting on what you said. There's a deeper truth there that resonates with me.\"\r\n      ] : [\r\n        \"That's awesome! I had a similar experience when I was hiking in the mountains last summer.\",\r\n        \"I totally get what you mean! Life is all about seizing opportunities and making memories.\",\r\n        \"That's such an interesting take! I'm always looking for new adventures that challenge my perspective.\"\r\n      ];\r\n      \r\n      return fallbacks[Math.floor(Math.random() * fallbacks.length)];\r\n    }\r\n  };\r\n  \r\n  // Scroll to bottom of message container\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n  \r\n  // Verify API key is present\r\n  useEffect(() => {\r\n    if (!process.env.REACT_APP_GROQ_API_KEY) {\r\n      setIsApiReady(false);\r\n      setError(\"Groq API key not found. Using pre-written responses instead.\");\r\n    }\r\n  }, []);\r\n  \r\n  // Add this after checking if API key exists\r\n  useEffect(() => {\r\n    // Log API status without revealing the key\r\n    console.log(\"API Key present:\", !!process.env.REACT_APP_GROQ_API_KEY);\r\n    \r\n    // Try to verify API access at component mount\r\n    const verifyApiAccess = async () => {\r\n      try {\r\n        // Test API with a simple prompt\r\n        await groq.chat.completions.create({\r\n          messages: [\r\n            { role: \"user\", content: \"Hello\" }\r\n          ],\r\n          model: \"llama-3-8b-8192\",\r\n          max_tokens: 10,\r\n        });\r\n        setIsApiReady(true);\r\n      } catch (err) {\r\n        console.error(\"Failed to connect to Groq API:\", err);\r\n        setIsApiReady(false);\r\n        setError(\"Could not connect to Groq API. Please check your API key.\");\r\n      }\r\n    };\r\n    \r\n    if (process.env.REACT_APP_GROQ_API_KEY) {\r\n      verifyApiAccess();\r\n    }\r\n  }, []);\r\n  \r\n  // Start the conversation\r\n  const startConversation = () => {\r\n    console.log(\"Starting conversation...\");\r\n    setIsSimulating(true);\r\n    setConversationStarted(true);\r\n    setMessages([]);\r\n    setMessageCount({ 0: 0, 1: 0 });\r\n    setError(null);\r\n    \r\n    // Start with a random conversation opener from personality 0\r\n    const starter = conversationStarters[Math.floor(Math.random() * conversationStarters.length)];\r\n    console.log(\"Initial message:\", starter);\r\n    \r\n    // Directly add the first message - this was working before\r\n    setMessages([{ sender: 0, text: starter }]);\r\n    setMessageCount(prev => ({ ...prev, 0: 1 }));\r\n    \r\n    // Continue the conversation after a delay\r\n    setTimeout(() => {\r\n      console.log(\"Calling continueConversation with sender 0\");\r\n      continueConversation(0);\r\n    }, 1000);\r\n  };\r\n  \r\n  // Function to continue the conversation\r\n  const continueConversation = async (lastSender: number) => {\r\n    console.log(\"Continuing conversation, last sender:\", lastSender);\r\n    if (!isSimulating) {\r\n      console.log(\"Not simulating, returning\");\r\n      return;\r\n    }\r\n    \r\n    // Determine next sender\r\n    const nextSender = lastSender === 0 ? 1 : 0;\r\n    \r\n    // Check if we've reached message limit\r\n    if (messageCount[0] >= 25 || messageCount[1] >= 25) {\r\n      setIsSimulating(false);\r\n      return;\r\n    }\r\n    \r\n    // Get conversation context (last 5 messages)\r\n    const context = messages.slice(-5).map(m => m.text);\r\n    \r\n    try {\r\n      // Show typing indicator\r\n      setMessages(prev => [...prev, { sender: nextSender, text: \"...\" }]);\r\n      \r\n      // Generate response using Groq API\r\n      const response = await generateResponse(nextSender, context);\r\n      \r\n      // Replace typing indicator with actual response\r\n      setMessages(prev => [...prev.slice(0, -1), { sender: nextSender, text: response }]);\r\n      setMessageCount(prev => ({ ...prev, [nextSender]: prev[nextSender] + 1 }));\r\n      \r\n      // Continue conversation after a delay\r\n      setTimeout(() => {\r\n        console.log(\"Calling continueConversation with sender\", nextSender);\r\n        continueConversation(nextSender);\r\n      }, 1000);\r\n    } catch (err) {\r\n      console.error(\"Error in conversation flow:\", err);\r\n      setError(\"There was an error in the conversation. Please try again.\");\r\n      setIsSimulating(false);\r\n    }\r\n  };\r\n  \r\n  // Make sure we're catching and displaying all errors\r\n  useEffect(() => {\r\n    // Add a global error handler\r\n    const handleError = (error) => {\r\n      console.error(\"Global error:\", error);\r\n      setError(\"An error occurred: \" + error.message);\r\n      setIsSimulating(false);\r\n    };\r\n    \r\n    window.addEventListener('error', handleError);\r\n    return () => window.removeEventListener('error', handleError);\r\n  }, []);\r\n  \r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ py: 4 }}>\r\n        <Button \r\n          startIcon={<ArrowBackIcon />} \r\n          onClick={() => navigate('/')}\r\n          sx={{ mb: 3 }}\r\n        >\r\n          Back to Home\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom textAlign=\"center\">\r\n          AI Match Simulation\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph textAlign=\"center\">\r\n          Watch as two AI personalities have a conversation to see how our matching system works. \r\n          Each AI has a distinct personality and communication style.\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Start button */}\r\n        {!conversationStarted && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={startConversation}\r\n              disabled={!isApiReady}\r\n              sx={{ py: 2, px: 4 }}\r\n            >\r\n              Start AI Conversation\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* Chat header with profiles */}\r\n        {conversationStarted && (\r\n          <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2, mt: 4 }}>\r\n              {personalities.map((personality, index) => (\r\n                <Box key={index} sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <Avatar sx={{ bgcolor: personality.color, mr: 1 }}>\r\n                    {personality.avatar}\r\n                  </Avatar>\r\n                  <Typography variant=\"subtitle1\">\r\n                    {personality.name}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            \r\n            {/* Chat container */}\r\n            <Paper \r\n              elevation={3} \r\n              sx={{ \r\n                height: '60vh', \r\n                overflowY: 'auto',\r\n                p: 2,\r\n                backgroundColor: '#f5f5f5'\r\n              }}\r\n            >\r\n              {messages.map((message, index) => (\r\n                <Box \r\n                  key={index}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: message.sender === 0 ? 'flex-start' : 'flex-end',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      maxWidth: '70%',\r\n                      bgcolor: message.sender === 0 ? personalities[0].color : personalities[1].color,\r\n                      color: 'white',\r\n                      p: 2,\r\n                      borderRadius: 2\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {message.text === \"...\" ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : (\r\n                        <>\r\n                          <Typography variant=\"caption\" sx={{ display: 'block', opacity: 0.8, mb: 0.5 }}>\r\n                            {personalities[message.sender].name}\r\n                          </Typography>\r\n                          {message.text}\r\n                        </>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </Paper>\r\n            \r\n            {/* Progress indicator */}\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                {personalities[0].name}: {messageCount[0]}/25 messages\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {personalities[1].name}: {messageCount[1]}/25 messages\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {!isSimulating && conversationStarted && (\r\n              <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Conversation Complete!\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={() => navigate('/create-profile')}\r\n                  sx={{ mt: 2, mr: 2 }}\r\n                >\r\n                  Create Your Profile\r\n                </Button>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\"\r\n                  onClick={startConversation}\r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  Start New Conversation\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIChatSimulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}